# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from apollo2_api_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401

from apollo2_api_client.model.media_type import MediaType
from apollo2_api_client.model.source import Source
from apollo2_api_client.model.http_validation_error import HTTPValidationError

# Query params
LimitSchema = schemas.IntSchema
LastSchema = schemas.IntSchema
EndSchema = schemas.IntSchema
WithEnrichmentSchema = schemas.BoolSchema
WithClusterSchema = schemas.BoolSchema
EnrichmentNameSchema = schemas.StrSchema
EnrichmentProviderSchema = schemas.StrSchema
EnrichmentTagSchema = schemas.StrSchema
EnrichmentVersionSchema = schemas.StrSchema
ClusterNameSchema = schemas.StrSchema
ClusterProviderSchema = schemas.StrSchema
ClusterTagSchema = schemas.StrSchema
ClusterVersionSchema = schemas.StrSchema
PlatformSchema = MediaType
IdentifierSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'last': typing.Union[LastSchema, decimal.Decimal, int, ],
        'end': typing.Union[EndSchema, decimal.Decimal, int, ],
        'with_enrichment': typing.Union[WithEnrichmentSchema, bool, ],
        'with_cluster': typing.Union[WithClusterSchema, bool, ],
        'enrichment_name': typing.Union[EnrichmentNameSchema, str, ],
        'enrichment_provider': typing.Union[EnrichmentProviderSchema, str, ],
        'enrichment_tag': typing.Union[EnrichmentTagSchema, str, ],
        'enrichment_version': typing.Union[EnrichmentVersionSchema, str, ],
        'cluster_name': typing.Union[ClusterNameSchema, str, ],
        'cluster_provider': typing.Union[ClusterProviderSchema, str, ],
        'cluster_tag': typing.Union[ClusterTagSchema, str, ],
        'cluster_version': typing.Union[ClusterVersionSchema, str, ],
        'platform': typing.Union[PlatformSchema, ],
        'identifier': typing.Union[IdentifierSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    required=True,
    explode=True,
)
request_query_last = api_client.QueryParameter(
    name="last",
    style=api_client.ParameterStyle.FORM,
    schema=LastSchema,
    explode=True,
)
request_query_end = api_client.QueryParameter(
    name="end",
    style=api_client.ParameterStyle.FORM,
    schema=EndSchema,
    explode=True,
)
request_query_with_enrichment = api_client.QueryParameter(
    name="with_enrichment",
    style=api_client.ParameterStyle.FORM,
    schema=WithEnrichmentSchema,
    explode=True,
)
request_query_with_cluster = api_client.QueryParameter(
    name="with_cluster",
    style=api_client.ParameterStyle.FORM,
    schema=WithClusterSchema,
    explode=True,
)
request_query_enrichment_name = api_client.QueryParameter(
    name="enrichment_name",
    style=api_client.ParameterStyle.FORM,
    schema=EnrichmentNameSchema,
    explode=True,
)
request_query_enrichment_provider = api_client.QueryParameter(
    name="enrichment_provider",
    style=api_client.ParameterStyle.FORM,
    schema=EnrichmentProviderSchema,
    explode=True,
)
request_query_enrichment_tag = api_client.QueryParameter(
    name="enrichment_tag",
    style=api_client.ParameterStyle.FORM,
    schema=EnrichmentTagSchema,
    explode=True,
)
request_query_enrichment_version = api_client.QueryParameter(
    name="enrichment_version",
    style=api_client.ParameterStyle.FORM,
    schema=EnrichmentVersionSchema,
    explode=True,
)
request_query_cluster_name = api_client.QueryParameter(
    name="cluster_name",
    style=api_client.ParameterStyle.FORM,
    schema=ClusterNameSchema,
    explode=True,
)
request_query_cluster_provider = api_client.QueryParameter(
    name="cluster_provider",
    style=api_client.ParameterStyle.FORM,
    schema=ClusterProviderSchema,
    explode=True,
)
request_query_cluster_tag = api_client.QueryParameter(
    name="cluster_tag",
    style=api_client.ParameterStyle.FORM,
    schema=ClusterTagSchema,
    explode=True,
)
request_query_cluster_version = api_client.QueryParameter(
    name="cluster_version",
    style=api_client.ParameterStyle.FORM,
    schema=ClusterVersionSchema,
    explode=True,
)
request_query_platform = api_client.QueryParameter(
    name="platform",
    style=api_client.ParameterStyle.FORM,
    schema=PlatformSchema,
    explode=True,
)
request_query_identifier = api_client.QueryParameter(
    name="identifier",
    style=api_client.ParameterStyle.FORM,
    schema=IdentifierSchema,
    explode=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['Source']:
            return Source

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['Source'], typing.List['Source']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'Source':
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = HTTPValidationError


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _source_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _source_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _source_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _source_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Source Get
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_limit,
            request_query_last,
            request_query_end,
            request_query_with_enrichment,
            request_query_with_cluster,
            request_query_enrichment_name,
            request_query_enrichment_provider,
            request_query_enrichment_tag,
            request_query_enrichment_version,
            request_query_cluster_name,
            request_query_cluster_provider,
            request_query_cluster_tag,
            request_query_cluster_version,
            request_query_platform,
            request_query_identifier,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class SourceGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def source_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def source_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def source_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def source_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._source_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._source_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


