# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Graph(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'provider': 'str',
        'tag': 'str',
        'version': 'str',
        'type': 'GraphType',
        'edges': 'list[Edge]',
        'data': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'provider': 'provider',
        'tag': 'tag',
        'version': 'version',
        'type': 'type',
        'edges': 'edges',
        'data': 'data'
    }

    def __init__(self, id=None, name=None, provider=None, tag=None, version=None, type=None, edges=None, data=None):  # noqa: E501
        """Graph - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._provider = None
        self._tag = None
        self._version = None
        self._type = None
        self._edges = None
        self._data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.provider = provider
        self.tag = tag
        self.version = version
        self.type = type
        if edges is not None:
            self.edges = edges
        if data is not None:
            self.data = data

    @property
    def id(self):
        """Gets the id of this Graph.  # noqa: E501


        :return: The id of this Graph.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Graph.


        :param id: The id of this Graph.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Graph.  # noqa: E501


        :return: The name of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Graph.


        :param name: The name of this Graph.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this Graph.  # noqa: E501


        :return: The provider of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Graph.


        :param provider: The provider of this Graph.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def tag(self):
        """Gets the tag of this Graph.  # noqa: E501


        :return: The tag of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Graph.


        :param tag: The tag of this Graph.  # noqa: E501
        :type: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def version(self):
        """Gets the version of this Graph.  # noqa: E501


        :return: The version of this Graph.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Graph.


        :param version: The version of this Graph.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def type(self):
        """Gets the type of this Graph.  # noqa: E501


        :return: The type of this Graph.  # noqa: E501
        :rtype: GraphType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Graph.


        :param type: The type of this Graph.  # noqa: E501
        :type: GraphType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def edges(self):
        """Gets the edges of this Graph.  # noqa: E501


        :return: The edges of this Graph.  # noqa: E501
        :rtype: list[Edge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this Graph.


        :param edges: The edges of this Graph.  # noqa: E501
        :type: list[Edge]
        """

        self._edges = edges

    @property
    def data(self):
        """Gets the data of this Graph.  # noqa: E501


        :return: The data of this Graph.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Graph.


        :param data: The data of this Graph.  # noqa: E501
        :type: object
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Graph, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Graph):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
