# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictFloat, StrictStr, conlist
from apollo2_api_client.models.incas_offset import IncasOffset

class IncasAnnotation(BaseModel):
    """
    IncasAnnotation
    """
    attribute: Optional[StrictStr] = None
    confidence: Optional[StrictFloat] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    offsets: Optional[conlist(IncasOffset)] = None
    provider_name: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties = ["attribute", "confidence", "id", "name", "offsets", "provider_name", "text", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IncasAnnotation:
        """Create an instance of IncasAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in offsets (list)
        _items = []
        if self.offsets:
            for _item in self.offsets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['offsets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IncasAnnotation:
        """Create an instance of IncasAnnotation from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IncasAnnotation.parse_obj(obj)

        _obj = IncasAnnotation.parse_obj({
            "attribute": obj.get("attribute"),
            "confidence": obj.get("confidence"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "offsets": [IncasOffset.from_dict(_item) for _item in obj.get("offsets")] if obj.get("offsets") is not None else None,
            "provider_name": obj.get("provider_name"),
            "text": obj.get("text"),
            "type": obj.get("type")
        })
        return _obj

