# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from apollo2_api_client.models.engagement_type import EngagementType

class IncasTwitterData(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    engagement_parent_id: Optional[StrictStr] = None
    engagement_type: Optional[EngagementType] = None
    follower_count: Optional[StrictInt] = None
    following_count: Optional[StrictInt] = None
    like_count: Optional[StrictInt] = None
    mentioned_users: Optional[List[StrictStr]] = None
    retweet_count: Optional[StrictInt] = None
    tweet_id: Optional[StrictStr] = None
    twitter_author_screenname: Optional[StrictStr] = None
    twitter_user_id: Optional[StrictStr] = None
    __properties = ["engagement_parent_id", "engagement_type", "follower_count", "following_count", "like_count", "mentioned_users", "retweet_count", "tweet_id", "twitter_author_screenname", "twitter_user_id"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IncasTwitterData:
        """Create an instance of IncasTwitterData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IncasTwitterData:
        """Create an instance of IncasTwitterData from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IncasTwitterData.parse_obj(obj)

        _obj = IncasTwitterData.parse_obj({
            "engagement_parent_id": obj.get("engagement_parent_id"),
            "engagement_type": obj.get("engagement_type"),
            "follower_count": obj.get("follower_count"),
            "following_count": obj.get("following_count"),
            "like_count": obj.get("like_count"),
            "mentioned_users": obj.get("mentioned_users"),
            "retweet_count": obj.get("retweet_count"),
            "tweet_id": obj.get("tweet_id"),
            "twitter_author_screenname": obj.get("twitter_author_screenname"),
            "twitter_user_id": obj.get("twitter_user_id")
        })
        return _obj

