# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist
from apollo2_api_client.models.entity_type import EntityType
from apollo2_api_client.models.incas_annotation import IncasAnnotation
from apollo2_api_client.models.incas_extra_attribute import IncasExtraAttribute
from apollo2_api_client.models.incas_links import IncasLinks
from apollo2_api_client.models.incas_media_resource import IncasMediaResource
from apollo2_api_client.models.incas_segment import IncasSegment

class IncasActor(BaseModel):
    """
    IncasActor
    """
    annotations: Optional[conlist(IncasAnnotation)] = None
    extra_attributes: Optional[conlist(IncasExtraAttribute)] = None
    media_resources: Optional[conlist(IncasMediaResource)] = None
    segments: Optional[conlist(IncasSegment)] = None
    actor_name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    entity_type: Optional[EntityType] = None
    expose_actor_info: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    knowledge_base_url: Optional[StrictStr] = None
    links: Optional[IncasLinks] = None
    name: Optional[StrictStr] = None
    __properties = ["annotations", "extra_attributes", "media_resources", "segments", "actor_name", "description", "entity_type", "expose_actor_info", "id", "knowledge_base_url", "links", "name"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IncasActor:
        """Create an instance of IncasActor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item in self.annotations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_attributes (list)
        _items = []
        if self.extra_attributes:
            for _item in self.extra_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extra_attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in media_resources (list)
        _items = []
        if self.media_resources:
            for _item in self.media_resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['media_resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item in self.segments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['segments'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IncasActor:
        """Create an instance of IncasActor from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IncasActor.parse_obj(obj)

        _obj = IncasActor.parse_obj({
            "annotations": [IncasAnnotation.from_dict(_item) for _item in obj.get("annotations")] if obj.get("annotations") is not None else None,
            "extra_attributes": [IncasExtraAttribute.from_dict(_item) for _item in obj.get("extra_attributes")] if obj.get("extra_attributes") is not None else None,
            "media_resources": [IncasMediaResource.from_dict(_item) for _item in obj.get("media_resources")] if obj.get("media_resources") is not None else None,
            "segments": [IncasSegment.from_dict(_item) for _item in obj.get("segments")] if obj.get("segments") is not None else None,
            "actor_name": obj.get("actor_name"),
            "description": obj.get("description"),
            "entity_type": obj.get("entity_type"),
            "expose_actor_info": obj.get("expose_actor_info"),
            "id": obj.get("id"),
            "knowledge_base_url": obj.get("knowledge_base_url"),
            "links": IncasLinks.from_dict(obj.get("links")) if obj.get("links") is not None else None,
            "name": obj.get("name")
        })
        return _obj

