# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist
from apollo2_api_client.models.twitter_attachment import TwitterAttachment
from apollo2_api_client.models.twitter_context_annotation import TwitterContextAnnotation
from apollo2_api_client.models.twitter_edit_controls import TwitterEditControls
from apollo2_api_client.models.twitter_entities import TwitterEntities
from apollo2_api_client.models.twitter_public_metrics import TwitterPublicMetrics
from apollo2_api_client.models.twitter_referenced_tweet import TwitterReferencedTweet

class TwitterData(BaseModel):
    """
    TwitterData
    """
    attachments: Optional[TwitterAttachment] = None
    context_annotations: Optional[conlist(TwitterContextAnnotation)] = None
    author_id: Optional[StrictStr] = None
    conversation_id: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    edit_controls: Optional[TwitterEditControls] = None
    edit_history_tweet_ids: Optional[conlist(StrictStr)] = None
    entities: Optional[TwitterEntities] = None
    id: Optional[StrictStr] = None
    lang: Optional[StrictStr] = None
    possibly_sensitive: Optional[StrictBool] = None
    public_metrics: Optional[TwitterPublicMetrics] = None
    reference_tweets: Optional[conlist(TwitterReferencedTweet)] = None
    reply_settings: Optional[StrictStr] = None
    tweet_id: Optional[StrictStr] = None
    twitter_author_screenname: Optional[StrictStr] = None
    twitter_user_id: Optional[StrictStr] = None
    __properties = ["attachments", "context_annotations", "author_id", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "id", "lang", "possibly_sensitive", "public_metrics", "reference_tweets", "reply_settings", "tweet_id", "twitter_author_screenname", "twitter_user_id"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TwitterData:
        """Create an instance of TwitterData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of attachments
        if self.attachments:
            _dict['attachments'] = self.attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in context_annotations (list)
        _items = []
        if self.context_annotations:
            for _item in self.context_annotations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['context_annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of edit_controls
        if self.edit_controls:
            _dict['edit_controls'] = self.edit_controls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entities
        if self.entities:
            _dict['entities'] = self.entities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_metrics
        if self.public_metrics:
            _dict['public_metrics'] = self.public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reference_tweets (list)
        _items = []
        if self.reference_tweets:
            for _item in self.reference_tweets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reference_tweets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TwitterData:
        """Create an instance of TwitterData from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TwitterData.parse_obj(obj)

        _obj = TwitterData.parse_obj({
            "attachments": TwitterAttachment.from_dict(obj.get("attachments")) if obj.get("attachments") is not None else None,
            "context_annotations": [TwitterContextAnnotation.from_dict(_item) for _item in obj.get("context_annotations")] if obj.get("context_annotations") is not None else None,
            "author_id": obj.get("author_id"),
            "conversation_id": obj.get("conversation_id"),
            "created_at": obj.get("created_at"),
            "edit_controls": TwitterEditControls.from_dict(obj.get("edit_controls")) if obj.get("edit_controls") is not None else None,
            "edit_history_tweet_ids": obj.get("edit_history_tweet_ids"),
            "entities": TwitterEntities.from_dict(obj.get("entities")) if obj.get("entities") is not None else None,
            "id": obj.get("id"),
            "lang": obj.get("lang"),
            "possibly_sensitive": obj.get("possibly_sensitive"),
            "public_metrics": TwitterPublicMetrics.from_dict(obj.get("public_metrics")) if obj.get("public_metrics") is not None else None,
            "reference_tweets": [TwitterReferencedTweet.from_dict(_item) for _item in obj.get("reference_tweets")] if obj.get("reference_tweets") is not None else None,
            "reply_settings": obj.get("reply_settings"),
            "tweet_id": obj.get("tweet_id"),
            "twitter_author_screenname": obj.get("twitter_author_screenname"),
            "twitter_user_id": obj.get("twitter_user_id")
        })
        return _obj

