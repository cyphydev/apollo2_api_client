# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from apollo2_api_client.models.incas_annotation import IncasAnnotation
from apollo2_api_client.models.incas_extra_attribute import IncasExtraAttribute

class IncasSegment(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    annotations: Optional[List[IncasAnnotation]] = None
    description: Optional[StrictStr] = None
    extra_attributes: Optional[List[IncasExtraAttribute]] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    provider_name: Optional[StrictStr] = None
    __properties = ["annotations", "description", "extra_attributes", "id", "name", "provider_name"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IncasSegment:
        """Create an instance of IncasSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item in self.annotations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_attributes (list)
        _items = []
        if self.extra_attributes:
            for _item in self.extra_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extra_attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IncasSegment:
        """Create an instance of IncasSegment from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IncasSegment.parse_obj(obj)

        _obj = IncasSegment.parse_obj({
            "annotations": [IncasAnnotation.from_dict(_item) for _item in obj.get("annotations")] if obj.get("annotations") is not None else None,
            "description": obj.get("description"),
            "extra_attributes": [IncasExtraAttribute.from_dict(_item) for _item in obj.get("extra_attributes")] if obj.get("extra_attributes") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "provider_name": obj.get("provider_name")
        })
        return _obj

