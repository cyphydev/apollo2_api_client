# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncasSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'list[IncasAnnotation]',
        'description': 'str',
        'extra_attributes': 'list[IncasExtraAttribute]',
        'id': 'str',
        'name': 'str',
        'provider_name': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'description': 'description',
        'extra_attributes': 'extra_attributes',
        'id': 'id',
        'name': 'name',
        'provider_name': 'provider_name'
    }

    def __init__(self, annotations=None, description=None, extra_attributes=None, id=None, name=None, provider_name=None):  # noqa: E501
        """IncasSegment - a model defined in Swagger"""  # noqa: E501
        self._annotations = None
        self._description = None
        self._extra_attributes = None
        self._id = None
        self._name = None
        self._provider_name = None
        self.discriminator = None
        if annotations is not None:
            self.annotations = annotations
        if description is not None:
            self.description = description
        if extra_attributes is not None:
            self.extra_attributes = extra_attributes
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if provider_name is not None:
            self.provider_name = provider_name

    @property
    def annotations(self):
        """Gets the annotations of this IncasSegment.  # noqa: E501


        :return: The annotations of this IncasSegment.  # noqa: E501
        :rtype: list[IncasAnnotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this IncasSegment.


        :param annotations: The annotations of this IncasSegment.  # noqa: E501
        :type: list[IncasAnnotation]
        """

        self._annotations = annotations

    @property
    def description(self):
        """Gets the description of this IncasSegment.  # noqa: E501


        :return: The description of this IncasSegment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IncasSegment.


        :param description: The description of this IncasSegment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def extra_attributes(self):
        """Gets the extra_attributes of this IncasSegment.  # noqa: E501


        :return: The extra_attributes of this IncasSegment.  # noqa: E501
        :rtype: list[IncasExtraAttribute]
        """
        return self._extra_attributes

    @extra_attributes.setter
    def extra_attributes(self, extra_attributes):
        """Sets the extra_attributes of this IncasSegment.


        :param extra_attributes: The extra_attributes of this IncasSegment.  # noqa: E501
        :type: list[IncasExtraAttribute]
        """

        self._extra_attributes = extra_attributes

    @property
    def id(self):
        """Gets the id of this IncasSegment.  # noqa: E501


        :return: The id of this IncasSegment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncasSegment.


        :param id: The id of this IncasSegment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IncasSegment.  # noqa: E501


        :return: The name of this IncasSegment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IncasSegment.


        :param name: The name of this IncasSegment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider_name(self):
        """Gets the provider_name of this IncasSegment.  # noqa: E501


        :return: The provider_name of this IncasSegment.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this IncasSegment.


        :param provider_name: The provider_name of this IncasSegment.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncasSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncasSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
