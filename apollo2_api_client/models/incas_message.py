# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncasMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'annotations': 'list[IncasAnnotation]',
        'data_tags': 'list[str]',
        'embedded_urls': 'list[str]',
        'extra_attributes': 'list[IncasExtraAttribute]',
        'image_urls': 'list[str]',
        'segments': 'list[IncasSegment]',
        'author': 'str',
        'content_text': 'str',
        'geolocation': 'GeoLocation',
        'id': 'str',
        'language': 'str',
        'media_type': 'MediaType',
        'media_type_attributes': 'IncasOneOfMediaTypeAttributes',
        'mentioned_users': 'list[object]',
        'name': 'str',
        'time_published': 'int',
        'title': 'str',
        'url': 'str',
        'translated_content_text': 'str',
        'translated_title': 'str'
    }

    attribute_map = {
        'data_type': 'data_type',
        'annotations': 'annotations',
        'data_tags': 'data_tags',
        'embedded_urls': 'embedded_urls',
        'extra_attributes': 'extra_attributes',
        'image_urls': 'image_urls',
        'segments': 'segments',
        'author': 'author',
        'content_text': 'content_text',
        'geolocation': 'geolocation',
        'id': 'id',
        'language': 'language',
        'media_type': 'media_type',
        'media_type_attributes': 'media_type_attributes',
        'mentioned_users': 'mentioned_users',
        'name': 'name',
        'time_published': 'time_published',
        'title': 'title',
        'url': 'url',
        'translated_content_text': 'translated_content_text',
        'translated_title': 'translated_title'
    }

    def __init__(self, data_type='IncasMessage', annotations=None, data_tags=None, embedded_urls=None, extra_attributes=None, image_urls=None, segments=None, author=None, content_text=None, geolocation=None, id=None, language=None, media_type=None, media_type_attributes=None, mentioned_users=None, name=None, time_published=None, title=None, url=None, translated_content_text=None, translated_title=None):  # noqa: E501
        """IncasMessage - a model defined in Swagger"""  # noqa: E501
        self._data_type = None
        self._annotations = None
        self._data_tags = None
        self._embedded_urls = None
        self._extra_attributes = None
        self._image_urls = None
        self._segments = None
        self._author = None
        self._content_text = None
        self._geolocation = None
        self._id = None
        self._language = None
        self._media_type = None
        self._media_type_attributes = None
        self._mentioned_users = None
        self._name = None
        self._time_published = None
        self._title = None
        self._url = None
        self._translated_content_text = None
        self._translated_title = None
        self.discriminator = None
        if data_type is not None:
            self.data_type = data_type
        if annotations is not None:
            self.annotations = annotations
        if data_tags is not None:
            self.data_tags = data_tags
        if embedded_urls is not None:
            self.embedded_urls = embedded_urls
        if extra_attributes is not None:
            self.extra_attributes = extra_attributes
        if image_urls is not None:
            self.image_urls = image_urls
        if segments is not None:
            self.segments = segments
        if author is not None:
            self.author = author
        if content_text is not None:
            self.content_text = content_text
        if geolocation is not None:
            self.geolocation = geolocation
        if id is not None:
            self.id = id
        if language is not None:
            self.language = language
        if media_type is not None:
            self.media_type = media_type
        if media_type_attributes is not None:
            self.media_type_attributes = media_type_attributes
        if mentioned_users is not None:
            self.mentioned_users = mentioned_users
        if name is not None:
            self.name = name
        if time_published is not None:
            self.time_published = time_published
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if translated_content_text is not None:
            self.translated_content_text = translated_content_text
        if translated_title is not None:
            self.translated_title = translated_title

    @property
    def data_type(self):
        """Gets the data_type of this IncasMessage.  # noqa: E501


        :return: The data_type of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this IncasMessage.


        :param data_type: The data_type of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def annotations(self):
        """Gets the annotations of this IncasMessage.  # noqa: E501


        :return: The annotations of this IncasMessage.  # noqa: E501
        :rtype: list[IncasAnnotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this IncasMessage.


        :param annotations: The annotations of this IncasMessage.  # noqa: E501
        :type: list[IncasAnnotation]
        """

        self._annotations = annotations

    @property
    def data_tags(self):
        """Gets the data_tags of this IncasMessage.  # noqa: E501


        :return: The data_tags of this IncasMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_tags

    @data_tags.setter
    def data_tags(self, data_tags):
        """Sets the data_tags of this IncasMessage.


        :param data_tags: The data_tags of this IncasMessage.  # noqa: E501
        :type: list[str]
        """

        self._data_tags = data_tags

    @property
    def embedded_urls(self):
        """Gets the embedded_urls of this IncasMessage.  # noqa: E501


        :return: The embedded_urls of this IncasMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._embedded_urls

    @embedded_urls.setter
    def embedded_urls(self, embedded_urls):
        """Sets the embedded_urls of this IncasMessage.


        :param embedded_urls: The embedded_urls of this IncasMessage.  # noqa: E501
        :type: list[str]
        """

        self._embedded_urls = embedded_urls

    @property
    def extra_attributes(self):
        """Gets the extra_attributes of this IncasMessage.  # noqa: E501


        :return: The extra_attributes of this IncasMessage.  # noqa: E501
        :rtype: list[IncasExtraAttribute]
        """
        return self._extra_attributes

    @extra_attributes.setter
    def extra_attributes(self, extra_attributes):
        """Sets the extra_attributes of this IncasMessage.


        :param extra_attributes: The extra_attributes of this IncasMessage.  # noqa: E501
        :type: list[IncasExtraAttribute]
        """

        self._extra_attributes = extra_attributes

    @property
    def image_urls(self):
        """Gets the image_urls of this IncasMessage.  # noqa: E501


        :return: The image_urls of this IncasMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_urls

    @image_urls.setter
    def image_urls(self, image_urls):
        """Sets the image_urls of this IncasMessage.


        :param image_urls: The image_urls of this IncasMessage.  # noqa: E501
        :type: list[str]
        """

        self._image_urls = image_urls

    @property
    def segments(self):
        """Gets the segments of this IncasMessage.  # noqa: E501


        :return: The segments of this IncasMessage.  # noqa: E501
        :rtype: list[IncasSegment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this IncasMessage.


        :param segments: The segments of this IncasMessage.  # noqa: E501
        :type: list[IncasSegment]
        """

        self._segments = segments

    @property
    def author(self):
        """Gets the author of this IncasMessage.  # noqa: E501


        :return: The author of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this IncasMessage.


        :param author: The author of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def content_text(self):
        """Gets the content_text of this IncasMessage.  # noqa: E501


        :return: The content_text of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._content_text

    @content_text.setter
    def content_text(self, content_text):
        """Sets the content_text of this IncasMessage.


        :param content_text: The content_text of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._content_text = content_text

    @property
    def geolocation(self):
        """Gets the geolocation of this IncasMessage.  # noqa: E501


        :return: The geolocation of this IncasMessage.  # noqa: E501
        :rtype: GeoLocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this IncasMessage.


        :param geolocation: The geolocation of this IncasMessage.  # noqa: E501
        :type: GeoLocation
        """

        self._geolocation = geolocation

    @property
    def id(self):
        """Gets the id of this IncasMessage.  # noqa: E501


        :return: The id of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncasMessage.


        :param id: The id of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this IncasMessage.  # noqa: E501


        :return: The language of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this IncasMessage.


        :param language: The language of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def media_type(self):
        """Gets the media_type of this IncasMessage.  # noqa: E501


        :return: The media_type of this IncasMessage.  # noqa: E501
        :rtype: MediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this IncasMessage.


        :param media_type: The media_type of this IncasMessage.  # noqa: E501
        :type: MediaType
        """

        self._media_type = media_type

    @property
    def media_type_attributes(self):
        """Gets the media_type_attributes of this IncasMessage.  # noqa: E501


        :return: The media_type_attributes of this IncasMessage.  # noqa: E501
        :rtype: IncasOneOfMediaTypeAttributes
        """
        return self._media_type_attributes

    @media_type_attributes.setter
    def media_type_attributes(self, media_type_attributes):
        """Sets the media_type_attributes of this IncasMessage.


        :param media_type_attributes: The media_type_attributes of this IncasMessage.  # noqa: E501
        :type: IncasOneOfMediaTypeAttributes
        """

        self._media_type_attributes = media_type_attributes

    @property
    def mentioned_users(self):
        """Gets the mentioned_users of this IncasMessage.  # noqa: E501


        :return: The mentioned_users of this IncasMessage.  # noqa: E501
        :rtype: list[object]
        """
        return self._mentioned_users

    @mentioned_users.setter
    def mentioned_users(self, mentioned_users):
        """Sets the mentioned_users of this IncasMessage.


        :param mentioned_users: The mentioned_users of this IncasMessage.  # noqa: E501
        :type: list[object]
        """

        self._mentioned_users = mentioned_users

    @property
    def name(self):
        """Gets the name of this IncasMessage.  # noqa: E501


        :return: The name of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IncasMessage.


        :param name: The name of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time_published(self):
        """Gets the time_published of this IncasMessage.  # noqa: E501


        :return: The time_published of this IncasMessage.  # noqa: E501
        :rtype: int
        """
        return self._time_published

    @time_published.setter
    def time_published(self, time_published):
        """Sets the time_published of this IncasMessage.


        :param time_published: The time_published of this IncasMessage.  # noqa: E501
        :type: int
        """

        self._time_published = time_published

    @property
    def title(self):
        """Gets the title of this IncasMessage.  # noqa: E501


        :return: The title of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IncasMessage.


        :param title: The title of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this IncasMessage.  # noqa: E501


        :return: The url of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IncasMessage.


        :param url: The url of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def translated_content_text(self):
        """Gets the translated_content_text of this IncasMessage.  # noqa: E501


        :return: The translated_content_text of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._translated_content_text

    @translated_content_text.setter
    def translated_content_text(self, translated_content_text):
        """Sets the translated_content_text of this IncasMessage.


        :param translated_content_text: The translated_content_text of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._translated_content_text = translated_content_text

    @property
    def translated_title(self):
        """Gets the translated_title of this IncasMessage.  # noqa: E501


        :return: The translated_title of this IncasMessage.  # noqa: E501
        :rtype: str
        """
        return self._translated_title

    @translated_title.setter
    def translated_title(self, translated_title):
        """Sets the translated_title of this IncasMessage.


        :param translated_title: The translated_title of this IncasMessage.  # noqa: E501
        :type: str
        """

        self._translated_title = translated_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncasMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncasMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
