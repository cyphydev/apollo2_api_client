# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictInt, StrictStr

class Edge(BaseModel):
    """
    Edge
    """
    id: Optional[StrictInt] = None
    graph_id: StrictInt = ...
    src_id: StrictInt = ...
    dst_id: StrictInt = ...
    type: StrictStr = ...
    timestamp: Optional[StrictInt] = None
    data: Optional[Dict[str, Any]] = None
    __properties = ["id", "graph_id", "src_id", "dst_id", "type", "timestamp", "data"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Edge:
        """Create an instance of Edge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Edge:
        """Create an instance of Edge from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Edge.parse_obj(obj)

        _obj = Edge.parse_obj({
            "id": obj.get("id"),
            "graph_id": obj.get("graph_id"),
            "src_id": obj.get("src_id"),
            "dst_id": obj.get("dst_id"),
            "type": obj.get("type"),
            "timestamp": obj.get("timestamp"),
            "data": obj.get("data")
        })
        return _obj

