# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from apollo2_api_client.models.array_enrichment import ArrayEnrichment
from apollo2_api_client.models.category_enrichment import CategoryEnrichment
from apollo2_api_client.models.list_enrichment import ListEnrichment
from apollo2_api_client.models.numerical_enrichment import NumericalEnrichment
from apollo2_api_client.models.text_enrichment import TextEnrichment
from typing import Any, List
from pydantic import StrictStr, Field

ENRICHMENT_ANY_OF_SCHEMAS = ["ArrayEnrichment", "CategoryEnrichment", "ListEnrichment", "NumericalEnrichment", "TextEnrichment"]

class Enrichment(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: CategoryEnrichment
    __anyof_schema_1: Optional[CategoryEnrichment] = None
    # data type: NumericalEnrichment
    __anyof_schema_2: Optional[NumericalEnrichment] = None
    # data type: ArrayEnrichment
    __anyof_schema_3: Optional[ArrayEnrichment] = None
    # data type: TextEnrichment
    __anyof_schema_4: Optional[TextEnrichment] = None
    # data type: ListEnrichment
    __anyof_schema_5: Optional[ListEnrichment] = None
    actual_instance: Any
    any_of_schemas: List[str] = Field(ENRICHMENT_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        error_messages = []
        # validate data type: CategoryEnrichment
        if type(v) is not CategoryEnrichment:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CategoryEnrichment`")
        else:
            return v

        # validate data type: NumericalEnrichment
        if type(v) is not NumericalEnrichment:
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumericalEnrichment`")
        else:
            return v

        # validate data type: ArrayEnrichment
        if type(v) is not ArrayEnrichment:
            error_messages.append(f"Error! Input type `{type(v)}` is not `ArrayEnrichment`")
        else:
            return v

        # validate data type: TextEnrichment
        if type(v) is not TextEnrichment:
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextEnrichment`")
        else:
            return v

        # validate data type: ListEnrichment
        if type(v) is not ListEnrichment:
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListEnrichment`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Enrichment with anyOf schemas: ArrayEnrichment, CategoryEnrichment, ListEnrichment, NumericalEnrichment, TextEnrichment. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_json(cls, json_str: str) -> Enrichment:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        # __anyof_schema_1: Optional[CategoryEnrichment] = None
        try:
            instance.actual_instance = CategoryEnrichment.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_2: Optional[NumericalEnrichment] = None
        try:
            instance.actual_instance = NumericalEnrichment.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_3: Optional[ArrayEnrichment] = None
        try:
            instance.actual_instance = ArrayEnrichment.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_4: Optional[TextEnrichment] = None
        try:
            instance.actual_instance = TextEnrichment.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_5: Optional[ListEnrichment] = None
        try:
            instance.actual_instance = ListEnrichment.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Enrichment with anyOf schemas: ArrayEnrichment, CategoryEnrichment, ListEnrichment, NumericalEnrichment, TextEnrichment. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

