# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, confloat
from apollo2_api_client.models.enrichment_type import EnrichmentType

class CategoryEnrichment(BaseModel):
    """
    CategoryEnrichment
    """
    name: StrictStr = Field(..., description="The enrichment (e.g., name for the enrichment.")
    provider: StrictStr = Field(..., description="The team who provides the enrichment.")
    tag: StrictStr = Field(..., description="The tag within the same (provider, name).")
    version: StrictStr = Field(..., description="The version within the same (provider, name).")
    type: Optional[EnrichmentType] = None
    value: StrictStr = ...
    confidence: Optional[confloat(le=1.0, ge=0.0, strict=True)] = Field(None, description="The confidence that this enrichment is correct, expressed as a percentage between 0.0 and 1.0")
    __properties = ["name", "provider", "tag", "version", "type", "value", "confidence"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CategoryEnrichment:
        """Create an instance of CategoryEnrichment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CategoryEnrichment:
        """Create an instance of CategoryEnrichment from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CategoryEnrichment.parse_obj(obj)

        _obj = CategoryEnrichment.parse_obj({
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "tag": obj.get("tag"),
            "version": obj.get("version"),
            "type": obj.get("type"),
            "value": obj.get("value"),
            "confidence": obj.get("confidence")
        })
        return _obj

