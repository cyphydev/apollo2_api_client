# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class VisualTopic(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    name: StrictStr = Field(..., description="The enrichment (e.g., Concern-Stance) name for the enrichment.")
    provider: StrictStr = Field(..., description="The team (e.g., UIUC-DMG) who provides the enrichment.")
    tag: StrictStr = Field(..., description="The tag within the same (provider, name).")
    version: StrictStr = Field(..., description="The version within the same (provider, name).")
    data: Optional[Dict[str, Any]] = None
    type: Optional[Any] = None
    __properties = ["id", "description", "name", "provider", "tag", "version", "data", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VisualTopic:
        """Create an instance of VisualTopic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VisualTopic:
        """Create an instance of VisualTopic from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VisualTopic.parse_obj(obj)

        _obj = VisualTopic.parse_obj({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "tag": obj.get("tag"),
            "version": obj.get("version"),
            "data": obj.get("data"),
            "type": ClusterType.from_dict(obj.get("type")) if obj.get("type") is not None else None
        })
        return _obj

