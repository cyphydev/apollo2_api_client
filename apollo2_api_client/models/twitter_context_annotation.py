# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from apollo2_api_client.models.twitter_domain import TwitterDomain
from apollo2_api_client.models.twitter_entity import TwitterEntity

class TwitterContextAnnotation(BaseModel):
    """
    TwitterContextAnnotation
    """
    domain: Optional[TwitterDomain] = None
    entity: Optional[TwitterEntity] = None
    __properties = ["domain", "entity"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TwitterContextAnnotation:
        """Create an instance of TwitterContextAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TwitterContextAnnotation:
        """Create an instance of TwitterContextAnnotation from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TwitterContextAnnotation.parse_obj(obj)

        _obj = TwitterContextAnnotation.parse_obj({
            "domain": TwitterDomain.from_dict(obj.get("domain")) if obj.get("domain") is not None else None,
            "entity": TwitterEntity.from_dict(obj.get("entity")) if obj.get("entity") is not None else None
        })
        return _obj

