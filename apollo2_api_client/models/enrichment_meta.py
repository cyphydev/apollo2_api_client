# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from apollo2_api_client.models.array_enrichment_meta import ArrayEnrichmentMeta
from apollo2_api_client.models.category_enrichment_meta import CategoryEnrichmentMeta
from apollo2_api_client.models.list_enrichment_meta import ListEnrichmentMeta
from apollo2_api_client.models.numerical_enrichment_meta import NumericalEnrichmentMeta
from apollo2_api_client.models.text_enrichment_meta import TextEnrichmentMeta
from typing import Any, List
from pydantic import StrictStr, Field

ENRICHMENTMETA_ANY_OF_SCHEMAS = ["ArrayEnrichmentMeta", "CategoryEnrichmentMeta", "ListEnrichmentMeta", "NumericalEnrichmentMeta", "TextEnrichmentMeta"]

class EnrichmentMeta(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: CategoryEnrichmentMeta
    __anyof_schema_1: Optional[CategoryEnrichmentMeta] = None
    # data type: NumericalEnrichmentMeta
    __anyof_schema_2: Optional[NumericalEnrichmentMeta] = None
    # data type: ArrayEnrichmentMeta
    __anyof_schema_3: Optional[ArrayEnrichmentMeta] = None
    # data type: TextEnrichmentMeta
    __anyof_schema_4: Optional[TextEnrichmentMeta] = None
    # data type: ListEnrichmentMeta
    __anyof_schema_5: Optional[ListEnrichmentMeta] = None
    actual_instance: Any
    any_of_schemas: List[str] = Field(ENRICHMENTMETA_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        error_messages = []
        # validate data type: CategoryEnrichmentMeta
        if type(v) is not CategoryEnrichmentMeta:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CategoryEnrichmentMeta`")
        else:
            return v

        # validate data type: NumericalEnrichmentMeta
        if type(v) is not NumericalEnrichmentMeta:
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumericalEnrichmentMeta`")
        else:
            return v

        # validate data type: ArrayEnrichmentMeta
        if type(v) is not ArrayEnrichmentMeta:
            error_messages.append(f"Error! Input type `{type(v)}` is not `ArrayEnrichmentMeta`")
        else:
            return v

        # validate data type: TextEnrichmentMeta
        if type(v) is not TextEnrichmentMeta:
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextEnrichmentMeta`")
        else:
            return v

        # validate data type: ListEnrichmentMeta
        if type(v) is not ListEnrichmentMeta:
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListEnrichmentMeta`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into EnrichmentMeta with anyOf schemas: ArrayEnrichmentMeta, CategoryEnrichmentMeta, ListEnrichmentMeta, NumericalEnrichmentMeta, TextEnrichmentMeta. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_json(cls, json_str: str) -> EnrichmentMeta:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        # __anyof_schema_1: Optional[CategoryEnrichmentMeta] = None
        try:
            instance.actual_instance = CategoryEnrichmentMeta.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_2: Optional[NumericalEnrichmentMeta] = None
        try:
            instance.actual_instance = NumericalEnrichmentMeta.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_3: Optional[ArrayEnrichmentMeta] = None
        try:
            instance.actual_instance = ArrayEnrichmentMeta.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_4: Optional[TextEnrichmentMeta] = None
        try:
            instance.actual_instance = TextEnrichmentMeta.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))
        # __anyof_schema_5: Optional[ListEnrichmentMeta] = None
        try:
            instance.actual_instance = ListEnrichmentMeta.from_json(json_str)
            return instance
        except ValidationError as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into EnrichmentMeta with anyOf schemas: ArrayEnrichmentMeta, CategoryEnrichmentMeta, ListEnrichmentMeta, NumericalEnrichmentMeta, TextEnrichmentMeta. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

