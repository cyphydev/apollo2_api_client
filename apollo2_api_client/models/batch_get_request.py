# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class BatchGetRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    ids: List[StrictInt] = ...
    with_enrichment: Optional[StrictBool] = None
    enrichment_name: Optional[StrictStr] = None
    enrichment_provider: Optional[StrictStr] = None
    enrichment_tag: Optional[StrictStr] = None
    enrichment_version: Optional[StrictStr] = None
    with_cluster: Optional[StrictBool] = None
    cluster_name: Optional[StrictStr] = None
    cluster_provider: Optional[StrictStr] = None
    cluster_tag: Optional[StrictStr] = None
    cluster_version: Optional[StrictStr] = None
    __properties = ["ids", "with_enrichment", "enrichment_name", "enrichment_provider", "enrichment_tag", "enrichment_version", "with_cluster", "cluster_name", "cluster_provider", "cluster_tag", "cluster_version"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BatchGetRequest:
        """Create an instance of BatchGetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BatchGetRequest:
        """Create an instance of BatchGetRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BatchGetRequest.parse_obj(obj)

        _obj = BatchGetRequest.parse_obj({
            "ids": obj.get("ids"),
            "with_enrichment": obj.get("with_enrichment"),
            "enrichment_name": obj.get("enrichment_name"),
            "enrichment_provider": obj.get("enrichment_provider"),
            "enrichment_tag": obj.get("enrichment_tag"),
            "enrichment_version": obj.get("enrichment_version"),
            "with_cluster": obj.get("with_cluster"),
            "cluster_name": obj.get("cluster_name"),
            "cluster_provider": obj.get("cluster_provider"),
            "cluster_tag": obj.get("cluster_tag"),
            "cluster_version": obj.get("cluster_version")
        })
        return _obj

