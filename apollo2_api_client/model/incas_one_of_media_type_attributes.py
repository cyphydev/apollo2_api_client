# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class IncasOneOfMediaTypeAttributes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            reddit_data = schemas.DictSchema
        
            @staticmethod
            def twitter_data() -> typing.Type['IncasTwitterData']:
                return IncasTwitterData
            __annotations__ = {
                "reddit_data": reddit_data,
                "twitter_data": twitter_data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reddit_data"]) -> MetaOapg.properties.reddit_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter_data"]) -> 'IncasTwitterData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reddit_data", "twitter_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reddit_data"]) -> typing.Union[MetaOapg.properties.reddit_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter_data"]) -> typing.Union['IncasTwitterData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reddit_data", "twitter_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        reddit_data: typing.Union[MetaOapg.properties.reddit_data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        twitter_data: typing.Union['IncasTwitterData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IncasOneOfMediaTypeAttributes':
        return super().__new__(
            cls,
            *_args,
            reddit_data=reddit_data,
            twitter_data=twitter_data,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.incas_twitter_data import IncasTwitterData
