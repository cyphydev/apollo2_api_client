# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class IncasMediaResource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            account_bio = schemas.StrSchema
            account_id = schemas.StrSchema
            account_status = schemas.StrSchema
        
            @staticmethod
            def account_type() -> typing.Type['AccountType']:
                return AccountType
            
            
            class display_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'display_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            follower_count = schemas.IntSchema
            friends_count = schemas.IntSchema
            
            
            class hashedUser_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hashedUser_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            language = schemas.StrSchema
            url = schemas.StrSchema
            
            
            class user_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            verified = schemas.BoolSchema
            __annotations__ = {
                "account_bio": account_bio,
                "account_id": account_id,
                "account_status": account_status,
                "account_type": account_type,
                "display_names": display_names,
                "follower_count": follower_count,
                "friends_count": friends_count,
                "hashedUser_names": hashedUser_names,
                "language": language,
                "url": url,
                "user_names": user_names,
                "verified": verified,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_bio"]) -> MetaOapg.properties.account_bio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_status"]) -> MetaOapg.properties.account_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> 'AccountType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_names"]) -> MetaOapg.properties.display_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follower_count"]) -> MetaOapg.properties.follower_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["friends_count"]) -> MetaOapg.properties.friends_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashedUser_names"]) -> MetaOapg.properties.hashedUser_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_names"]) -> MetaOapg.properties.user_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verified"]) -> MetaOapg.properties.verified: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_bio", "account_id", "account_status", "account_type", "display_names", "follower_count", "friends_count", "hashedUser_names", "language", "url", "user_names", "verified", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_bio"]) -> typing.Union[MetaOapg.properties.account_bio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_status"]) -> typing.Union[MetaOapg.properties.account_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> typing.Union['AccountType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_names"]) -> typing.Union[MetaOapg.properties.display_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follower_count"]) -> typing.Union[MetaOapg.properties.follower_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["friends_count"]) -> typing.Union[MetaOapg.properties.friends_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashedUser_names"]) -> typing.Union[MetaOapg.properties.hashedUser_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_names"]) -> typing.Union[MetaOapg.properties.user_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verified"]) -> typing.Union[MetaOapg.properties.verified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_bio", "account_id", "account_status", "account_type", "display_names", "follower_count", "friends_count", "hashedUser_names", "language", "url", "user_names", "verified", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_bio: typing.Union[MetaOapg.properties.account_bio, str, schemas.Unset] = schemas.unset,
        account_id: typing.Union[MetaOapg.properties.account_id, str, schemas.Unset] = schemas.unset,
        account_status: typing.Union[MetaOapg.properties.account_status, str, schemas.Unset] = schemas.unset,
        account_type: typing.Union['AccountType', schemas.Unset] = schemas.unset,
        display_names: typing.Union[MetaOapg.properties.display_names, list, tuple, schemas.Unset] = schemas.unset,
        follower_count: typing.Union[MetaOapg.properties.follower_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        friends_count: typing.Union[MetaOapg.properties.friends_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hashedUser_names: typing.Union[MetaOapg.properties.hashedUser_names, list, tuple, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        user_names: typing.Union[MetaOapg.properties.user_names, list, tuple, schemas.Unset] = schemas.unset,
        verified: typing.Union[MetaOapg.properties.verified, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IncasMediaResource':
        return super().__new__(
            cls,
            *_args,
            account_bio=account_bio,
            account_id=account_id,
            account_status=account_status,
            account_type=account_type,
            display_names=display_names,
            follower_count=follower_count,
            friends_count=friends_count,
            hashedUser_names=hashedUser_names,
            language=language,
            url=url,
            user_names=user_names,
            verified=verified,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.account_type import AccountType
