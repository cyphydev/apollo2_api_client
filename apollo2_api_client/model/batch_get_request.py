# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class BatchGetRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ids",
        }
        
        class properties:
            
            
            class ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            with_enrichment = schemas.BoolSchema
            enrichment_name = schemas.StrSchema
            enrichment_provider = schemas.StrSchema
            enrichment_tag = schemas.StrSchema
            enrichment_version = schemas.StrSchema
            with_cluster = schemas.BoolSchema
            cluster_name = schemas.StrSchema
            cluster_provider = schemas.StrSchema
            cluster_tag = schemas.StrSchema
            cluster_version = schemas.StrSchema
            __annotations__ = {
                "ids": ids,
                "with_enrichment": with_enrichment,
                "enrichment_name": enrichment_name,
                "enrichment_provider": enrichment_provider,
                "enrichment_tag": enrichment_tag,
                "enrichment_version": enrichment_version,
                "with_cluster": with_cluster,
                "cluster_name": cluster_name,
                "cluster_provider": cluster_provider,
                "cluster_tag": cluster_tag,
                "cluster_version": cluster_version,
            }
    
    ids: MetaOapg.properties.ids
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ids"]) -> MetaOapg.properties.ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["with_enrichment"]) -> MetaOapg.properties.with_enrichment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrichment_name"]) -> MetaOapg.properties.enrichment_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrichment_provider"]) -> MetaOapg.properties.enrichment_provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrichment_tag"]) -> MetaOapg.properties.enrichment_tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrichment_version"]) -> MetaOapg.properties.enrichment_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["with_cluster"]) -> MetaOapg.properties.with_cluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_name"]) -> MetaOapg.properties.cluster_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_provider"]) -> MetaOapg.properties.cluster_provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_tag"]) -> MetaOapg.properties.cluster_tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_version"]) -> MetaOapg.properties.cluster_version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ids", "with_enrichment", "enrichment_name", "enrichment_provider", "enrichment_tag", "enrichment_version", "with_cluster", "cluster_name", "cluster_provider", "cluster_tag", "cluster_version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ids"]) -> MetaOapg.properties.ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["with_enrichment"]) -> typing.Union[MetaOapg.properties.with_enrichment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrichment_name"]) -> typing.Union[MetaOapg.properties.enrichment_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrichment_provider"]) -> typing.Union[MetaOapg.properties.enrichment_provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrichment_tag"]) -> typing.Union[MetaOapg.properties.enrichment_tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrichment_version"]) -> typing.Union[MetaOapg.properties.enrichment_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["with_cluster"]) -> typing.Union[MetaOapg.properties.with_cluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_name"]) -> typing.Union[MetaOapg.properties.cluster_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_provider"]) -> typing.Union[MetaOapg.properties.cluster_provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_tag"]) -> typing.Union[MetaOapg.properties.cluster_tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_version"]) -> typing.Union[MetaOapg.properties.cluster_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ids", "with_enrichment", "enrichment_name", "enrichment_provider", "enrichment_tag", "enrichment_version", "with_cluster", "cluster_name", "cluster_provider", "cluster_tag", "cluster_version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ids: typing.Union[MetaOapg.properties.ids, list, tuple, ],
        with_enrichment: typing.Union[MetaOapg.properties.with_enrichment, bool, schemas.Unset] = schemas.unset,
        enrichment_name: typing.Union[MetaOapg.properties.enrichment_name, str, schemas.Unset] = schemas.unset,
        enrichment_provider: typing.Union[MetaOapg.properties.enrichment_provider, str, schemas.Unset] = schemas.unset,
        enrichment_tag: typing.Union[MetaOapg.properties.enrichment_tag, str, schemas.Unset] = schemas.unset,
        enrichment_version: typing.Union[MetaOapg.properties.enrichment_version, str, schemas.Unset] = schemas.unset,
        with_cluster: typing.Union[MetaOapg.properties.with_cluster, bool, schemas.Unset] = schemas.unset,
        cluster_name: typing.Union[MetaOapg.properties.cluster_name, str, schemas.Unset] = schemas.unset,
        cluster_provider: typing.Union[MetaOapg.properties.cluster_provider, str, schemas.Unset] = schemas.unset,
        cluster_tag: typing.Union[MetaOapg.properties.cluster_tag, str, schemas.Unset] = schemas.unset,
        cluster_version: typing.Union[MetaOapg.properties.cluster_version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BatchGetRequest':
        return super().__new__(
            cls,
            *_args,
            ids=ids,
            with_enrichment=with_enrichment,
            enrichment_name=enrichment_name,
            enrichment_provider=enrichment_provider,
            enrichment_tag=enrichment_tag,
            enrichment_version=enrichment_version,
            with_cluster=with_cluster,
            cluster_name=cluster_name,
            cluster_provider=cluster_provider,
            cluster_tag=cluster_tag,
            cluster_version=cluster_version,
            _configuration=_configuration,
            **kwargs,
        )
