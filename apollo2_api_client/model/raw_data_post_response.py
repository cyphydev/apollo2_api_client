# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class RawDataPostResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "media_item_id_map",
            "source_id_map",
            "item_id_map",
        }
        
        class properties:
            
            
            class source_id_map(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'source_id_map':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class item_id_map(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'item_id_map':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class media_item_id_map(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'media_item_id_map':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "source_id_map": source_id_map,
                "item_id_map": item_id_map,
                "media_item_id_map": media_item_id_map,
            }
    
    media_item_id_map: MetaOapg.properties.media_item_id_map
    source_id_map: MetaOapg.properties.source_id_map
    item_id_map: MetaOapg.properties.item_id_map
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_id_map"]) -> MetaOapg.properties.source_id_map: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id_map"]) -> MetaOapg.properties.item_id_map: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_item_id_map"]) -> MetaOapg.properties.media_item_id_map: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["source_id_map", "item_id_map", "media_item_id_map", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_id_map"]) -> MetaOapg.properties.source_id_map: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id_map"]) -> MetaOapg.properties.item_id_map: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_item_id_map"]) -> MetaOapg.properties.media_item_id_map: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source_id_map", "item_id_map", "media_item_id_map", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        media_item_id_map: typing.Union[MetaOapg.properties.media_item_id_map, dict, frozendict.frozendict, ],
        source_id_map: typing.Union[MetaOapg.properties.source_id_map, dict, frozendict.frozendict, ],
        item_id_map: typing.Union[MetaOapg.properties.item_id_map, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RawDataPostResponse':
        return super().__new__(
            cls,
            *_args,
            media_item_id_map=media_item_id_map,
            source_id_map=source_id_map,
            item_id_map=item_id_map,
            _configuration=_configuration,
            **kwargs,
        )
