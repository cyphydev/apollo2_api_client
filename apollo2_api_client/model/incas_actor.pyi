# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class IncasActor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class annotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasAnnotation']:
                        return IncasAnnotation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasAnnotation'], typing.List['IncasAnnotation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annotations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasAnnotation':
                    return super().__getitem__(i)
            
            
            class extra_attributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasExtraAttribute']:
                        return IncasExtraAttribute
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasExtraAttribute'], typing.List['IncasExtraAttribute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extra_attributes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasExtraAttribute':
                    return super().__getitem__(i)
            
            
            class media_resources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasMediaResource']:
                        return IncasMediaResource
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasMediaResource'], typing.List['IncasMediaResource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media_resources':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasMediaResource':
                    return super().__getitem__(i)
            
            
            class segments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasSegment']:
                        return IncasSegment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasSegment'], typing.List['IncasSegment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'segments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasSegment':
                    return super().__getitem__(i)
            actor_name = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def entity_type() -> typing.Type['EntityType']:
                return EntityType
            expose_actor_info = schemas.BoolSchema
            id = schemas.StrSchema
            knowledge_base_url = schemas.StrSchema
        
            @staticmethod
            def links() -> typing.Type['IncasLinks']:
                return IncasLinks
            name = schemas.StrSchema
            __annotations__ = {
                "annotations": annotations,
                "extra_attributes": extra_attributes,
                "media_resources": media_resources,
                "segments": segments,
                "actor_name": actor_name,
                "description": description,
                "entity_type": entity_type,
                "expose_actor_info": expose_actor_info,
                "id": id,
                "knowledge_base_url": knowledge_base_url,
                "links": links,
                "name": name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_attributes"]) -> MetaOapg.properties.extra_attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_resources"]) -> MetaOapg.properties.media_resources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segments"]) -> MetaOapg.properties.segments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actor_name"]) -> MetaOapg.properties.actor_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_type"]) -> 'EntityType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expose_actor_info"]) -> MetaOapg.properties.expose_actor_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["knowledge_base_url"]) -> MetaOapg.properties.knowledge_base_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> 'IncasLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annotations", "extra_attributes", "media_resources", "segments", "actor_name", "description", "entity_type", "expose_actor_info", "id", "knowledge_base_url", "links", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> typing.Union[MetaOapg.properties.annotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_attributes"]) -> typing.Union[MetaOapg.properties.extra_attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_resources"]) -> typing.Union[MetaOapg.properties.media_resources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segments"]) -> typing.Union[MetaOapg.properties.segments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actor_name"]) -> typing.Union[MetaOapg.properties.actor_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_type"]) -> typing.Union['EntityType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expose_actor_info"]) -> typing.Union[MetaOapg.properties.expose_actor_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["knowledge_base_url"]) -> typing.Union[MetaOapg.properties.knowledge_base_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union['IncasLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annotations", "extra_attributes", "media_resources", "segments", "actor_name", "description", "entity_type", "expose_actor_info", "id", "knowledge_base_url", "links", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        annotations: typing.Union[MetaOapg.properties.annotations, list, tuple, schemas.Unset] = schemas.unset,
        extra_attributes: typing.Union[MetaOapg.properties.extra_attributes, list, tuple, schemas.Unset] = schemas.unset,
        media_resources: typing.Union[MetaOapg.properties.media_resources, list, tuple, schemas.Unset] = schemas.unset,
        segments: typing.Union[MetaOapg.properties.segments, list, tuple, schemas.Unset] = schemas.unset,
        actor_name: typing.Union[MetaOapg.properties.actor_name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        entity_type: typing.Union['EntityType', schemas.Unset] = schemas.unset,
        expose_actor_info: typing.Union[MetaOapg.properties.expose_actor_info, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        knowledge_base_url: typing.Union[MetaOapg.properties.knowledge_base_url, str, schemas.Unset] = schemas.unset,
        links: typing.Union['IncasLinks', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IncasActor':
        return super().__new__(
            cls,
            *_args,
            annotations=annotations,
            extra_attributes=extra_attributes,
            media_resources=media_resources,
            segments=segments,
            actor_name=actor_name,
            description=description,
            entity_type=entity_type,
            expose_actor_info=expose_actor_info,
            id=id,
            knowledge_base_url=knowledge_base_url,
            links=links,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.entity_type import EntityType
from apollo2_api_client.model.incas_annotation import IncasAnnotation
from apollo2_api_client.model.incas_extra_attribute import IncasExtraAttribute
from apollo2_api_client.model.incas_links import IncasLinks
from apollo2_api_client.model.incas_media_resource import IncasMediaResource
from apollo2_api_client.model.incas_segment import IncasSegment
