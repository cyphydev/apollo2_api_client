# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class IncasSegment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class annotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasAnnotation']:
                        return IncasAnnotation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasAnnotation'], typing.List['IncasAnnotation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annotations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasAnnotation':
                    return super().__getitem__(i)
            description = schemas.StrSchema
            
            
            class extra_attributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasExtraAttribute']:
                        return IncasExtraAttribute
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasExtraAttribute'], typing.List['IncasExtraAttribute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extra_attributes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasExtraAttribute':
                    return super().__getitem__(i)
            id = schemas.StrSchema
            name = schemas.StrSchema
            provider_name = schemas.StrSchema
            __annotations__ = {
                "annotations": annotations,
                "description": description,
                "extra_attributes": extra_attributes,
                "id": id,
                "name": name,
                "provider_name": provider_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_attributes"]) -> MetaOapg.properties.extra_attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_name"]) -> MetaOapg.properties.provider_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annotations", "description", "extra_attributes", "id", "name", "provider_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> typing.Union[MetaOapg.properties.annotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_attributes"]) -> typing.Union[MetaOapg.properties.extra_attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_name"]) -> typing.Union[MetaOapg.properties.provider_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annotations", "description", "extra_attributes", "id", "name", "provider_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        annotations: typing.Union[MetaOapg.properties.annotations, list, tuple, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        extra_attributes: typing.Union[MetaOapg.properties.extra_attributes, list, tuple, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        provider_name: typing.Union[MetaOapg.properties.provider_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IncasSegment':
        return super().__new__(
            cls,
            *_args,
            annotations=annotations,
            description=description,
            extra_attributes=extra_attributes,
            id=id,
            name=name,
            provider_name=provider_name,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.incas_annotation import IncasAnnotation
from apollo2_api_client.model.incas_extra_attribute import IncasExtraAttribute
