# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class Item(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "data",
            "author",
            "id",
            "time_published",
            "platform",
        }
        
        class properties:
            id = schemas.StrSchema
            author = schemas.StrSchema
        
            @staticmethod
            def platform() -> typing.Type['MediaType']:
                return MediaType
            time_published = schemas.IntSchema
            
            
            class data(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_1 = schemas.DictSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TwitterData,
                            cls.any_of_1,
                            IncasMessage,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            sid = schemas.IntSchema
            source_id = schemas.IntSchema
            
            
            class enrichments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Enrichment']:
                        return Enrichment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Enrichment'], typing.List['Enrichment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enrichments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Enrichment':
                    return super().__getitem__(i)
            
            
            class clusters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClusterMember']:
                        return ClusterMember
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ClusterMember'], typing.List['ClusterMember']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clusters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClusterMember':
                    return super().__getitem__(i)
            
            
            class media_items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MediaItem']:
                        return MediaItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MediaItem'], typing.List['MediaItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media_items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MediaItem':
                    return super().__getitem__(i)
            text = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "author": author,
                "platform": platform,
                "time_published": time_published,
                "data": data,
                "sid": sid,
                "source_id": source_id,
                "enrichments": enrichments,
                "clusters": clusters,
                "media_items": media_items,
                "text": text,
            }
    
    data: MetaOapg.properties.data
    author: MetaOapg.properties.author
    id: MetaOapg.properties.id
    time_published: MetaOapg.properties.time_published
    platform: 'MediaType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> MetaOapg.properties.author: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> 'MediaType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_published"]) -> MetaOapg.properties.time_published: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sid"]) -> MetaOapg.properties.sid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_id"]) -> MetaOapg.properties.source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrichments"]) -> MetaOapg.properties.enrichments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusters"]) -> MetaOapg.properties.clusters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_items"]) -> MetaOapg.properties.media_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "author", "platform", "time_published", "data", "sid", "source_id", "enrichments", "clusters", "media_items", "text", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> MetaOapg.properties.author: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> 'MediaType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_published"]) -> MetaOapg.properties.time_published: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sid"]) -> typing.Union[MetaOapg.properties.sid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_id"]) -> typing.Union[MetaOapg.properties.source_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrichments"]) -> typing.Union[MetaOapg.properties.enrichments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusters"]) -> typing.Union[MetaOapg.properties.clusters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_items"]) -> typing.Union[MetaOapg.properties.media_items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "author", "platform", "time_published", "data", "sid", "source_id", "enrichments", "clusters", "media_items", "text", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        author: typing.Union[MetaOapg.properties.author, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        time_published: typing.Union[MetaOapg.properties.time_published, decimal.Decimal, int, ],
        platform: 'MediaType',
        sid: typing.Union[MetaOapg.properties.sid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        source_id: typing.Union[MetaOapg.properties.source_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enrichments: typing.Union[MetaOapg.properties.enrichments, list, tuple, schemas.Unset] = schemas.unset,
        clusters: typing.Union[MetaOapg.properties.clusters, list, tuple, schemas.Unset] = schemas.unset,
        media_items: typing.Union[MetaOapg.properties.media_items, list, tuple, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Item':
        return super().__new__(
            cls,
            *_args,
            data=data,
            author=author,
            id=id,
            time_published=time_published,
            platform=platform,
            sid=sid,
            source_id=source_id,
            enrichments=enrichments,
            clusters=clusters,
            media_items=media_items,
            text=text,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.cluster_member import ClusterMember
from apollo2_api_client.model.enrichment import Enrichment
from apollo2_api_client.model.incas_message import IncasMessage
from apollo2_api_client.model.media_item import MediaItem
from apollo2_api_client.model.media_type import MediaType
from apollo2_api_client.model.twitter_data import TwitterData
