# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class IncasTwitterData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            engagement_parent_id = schemas.StrSchema
        
            @staticmethod
            def engagement_type() -> typing.Type['EngagementType']:
                return EngagementType
            follower_count = schemas.IntSchema
            following_count = schemas.IntSchema
            like_count = schemas.IntSchema
            
            
            class mentioned_users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mentioned_users':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            retweet_count = schemas.IntSchema
            tweet_id = schemas.StrSchema
            twitter_author_screenname = schemas.StrSchema
            twitter_user_id = schemas.StrSchema
            __annotations__ = {
                "engagement_parent_id": engagement_parent_id,
                "engagement_type": engagement_type,
                "follower_count": follower_count,
                "following_count": following_count,
                "like_count": like_count,
                "mentioned_users": mentioned_users,
                "retweet_count": retweet_count,
                "tweet_id": tweet_id,
                "twitter_author_screenname": twitter_author_screenname,
                "twitter_user_id": twitter_user_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagement_parent_id"]) -> MetaOapg.properties.engagement_parent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagement_type"]) -> 'EngagementType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follower_count"]) -> MetaOapg.properties.follower_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["following_count"]) -> MetaOapg.properties.following_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mentioned_users"]) -> MetaOapg.properties.mentioned_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retweet_count"]) -> MetaOapg.properties.retweet_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tweet_id"]) -> MetaOapg.properties.tweet_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter_author_screenname"]) -> MetaOapg.properties.twitter_author_screenname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter_user_id"]) -> MetaOapg.properties.twitter_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["engagement_parent_id", "engagement_type", "follower_count", "following_count", "like_count", "mentioned_users", "retweet_count", "tweet_id", "twitter_author_screenname", "twitter_user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagement_parent_id"]) -> typing.Union[MetaOapg.properties.engagement_parent_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagement_type"]) -> typing.Union['EngagementType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follower_count"]) -> typing.Union[MetaOapg.properties.follower_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["following_count"]) -> typing.Union[MetaOapg.properties.following_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["like_count"]) -> typing.Union[MetaOapg.properties.like_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mentioned_users"]) -> typing.Union[MetaOapg.properties.mentioned_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retweet_count"]) -> typing.Union[MetaOapg.properties.retweet_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tweet_id"]) -> typing.Union[MetaOapg.properties.tweet_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter_author_screenname"]) -> typing.Union[MetaOapg.properties.twitter_author_screenname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter_user_id"]) -> typing.Union[MetaOapg.properties.twitter_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["engagement_parent_id", "engagement_type", "follower_count", "following_count", "like_count", "mentioned_users", "retweet_count", "tweet_id", "twitter_author_screenname", "twitter_user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        engagement_parent_id: typing.Union[MetaOapg.properties.engagement_parent_id, str, schemas.Unset] = schemas.unset,
        engagement_type: typing.Union['EngagementType', schemas.Unset] = schemas.unset,
        follower_count: typing.Union[MetaOapg.properties.follower_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        following_count: typing.Union[MetaOapg.properties.following_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        like_count: typing.Union[MetaOapg.properties.like_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mentioned_users: typing.Union[MetaOapg.properties.mentioned_users, list, tuple, schemas.Unset] = schemas.unset,
        retweet_count: typing.Union[MetaOapg.properties.retweet_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tweet_id: typing.Union[MetaOapg.properties.tweet_id, str, schemas.Unset] = schemas.unset,
        twitter_author_screenname: typing.Union[MetaOapg.properties.twitter_author_screenname, str, schemas.Unset] = schemas.unset,
        twitter_user_id: typing.Union[MetaOapg.properties.twitter_user_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IncasTwitterData':
        return super().__new__(
            cls,
            *_args,
            engagement_parent_id=engagement_parent_id,
            engagement_type=engagement_type,
            follower_count=follower_count,
            following_count=following_count,
            like_count=like_count,
            mentioned_users=mentioned_users,
            retweet_count=retweet_count,
            tweet_id=tweet_id,
            twitter_author_screenname=twitter_author_screenname,
            twitter_user_id=twitter_user_id,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.engagement_type import EngagementType
