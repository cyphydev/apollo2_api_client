# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class IncasMessage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class annotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasAnnotation']:
                        return IncasAnnotation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasAnnotation'], typing.List['IncasAnnotation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annotations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasAnnotation':
                    return super().__getitem__(i)
            
            
            class data_tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data_tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class embedded_urls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'embedded_urls':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class extra_attributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasExtraAttribute']:
                        return IncasExtraAttribute
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasExtraAttribute'], typing.List['IncasExtraAttribute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extra_attributes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasExtraAttribute':
                    return super().__getitem__(i)
            
            
            class image_urls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_urls':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class segments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IncasSegment']:
                        return IncasSegment
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['IncasSegment'], typing.List['IncasSegment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'segments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IncasSegment':
                    return super().__getitem__(i)
            author = schemas.StrSchema
            content_text = schemas.StrSchema
        
            @staticmethod
            def geolocation() -> typing.Type['GeoLocation']:
                return GeoLocation
            id = schemas.StrSchema
            language = schemas.StrSchema
        
            @staticmethod
            def media_type() -> typing.Type['MediaType']:
                return MediaType
        
            @staticmethod
            def media_type_attributes() -> typing.Type['IncasOneOfMediaTypeAttributes']:
                return IncasOneOfMediaTypeAttributes
            
            
            class mentioned_users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mentioned_users':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            name = schemas.StrSchema
            time_published = schemas.IntSchema
            title = schemas.StrSchema
            url = schemas.StrSchema
            translated_content_text = schemas.StrSchema
            translated_title = schemas.StrSchema
            __annotations__ = {
                "annotations": annotations,
                "data_tags": data_tags,
                "embedded_urls": embedded_urls,
                "extra_attributes": extra_attributes,
                "image_urls": image_urls,
                "segments": segments,
                "author": author,
                "content_text": content_text,
                "geolocation": geolocation,
                "id": id,
                "language": language,
                "media_type": media_type,
                "media_type_attributes": media_type_attributes,
                "mentioned_users": mentioned_users,
                "name": name,
                "time_published": time_published,
                "title": title,
                "url": url,
                "translated_content_text": translated_content_text,
                "translated_title": translated_title,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_tags"]) -> MetaOapg.properties.data_tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embedded_urls"]) -> MetaOapg.properties.embedded_urls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_attributes"]) -> MetaOapg.properties.extra_attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_urls"]) -> MetaOapg.properties.image_urls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segments"]) -> MetaOapg.properties.segments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> MetaOapg.properties.author: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_text"]) -> MetaOapg.properties.content_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geolocation"]) -> 'GeoLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_type"]) -> 'MediaType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_type_attributes"]) -> 'IncasOneOfMediaTypeAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mentioned_users"]) -> MetaOapg.properties.mentioned_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_published"]) -> MetaOapg.properties.time_published: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translated_content_text"]) -> MetaOapg.properties.translated_content_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translated_title"]) -> MetaOapg.properties.translated_title: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annotations", "data_tags", "embedded_urls", "extra_attributes", "image_urls", "segments", "author", "content_text", "geolocation", "id", "language", "media_type", "media_type_attributes", "mentioned_users", "name", "time_published", "title", "url", "translated_content_text", "translated_title", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> typing.Union[MetaOapg.properties.annotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_tags"]) -> typing.Union[MetaOapg.properties.data_tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embedded_urls"]) -> typing.Union[MetaOapg.properties.embedded_urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_attributes"]) -> typing.Union[MetaOapg.properties.extra_attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_urls"]) -> typing.Union[MetaOapg.properties.image_urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segments"]) -> typing.Union[MetaOapg.properties.segments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union[MetaOapg.properties.author, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_text"]) -> typing.Union[MetaOapg.properties.content_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geolocation"]) -> typing.Union['GeoLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_type"]) -> typing.Union['MediaType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_type_attributes"]) -> typing.Union['IncasOneOfMediaTypeAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mentioned_users"]) -> typing.Union[MetaOapg.properties.mentioned_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_published"]) -> typing.Union[MetaOapg.properties.time_published, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translated_content_text"]) -> typing.Union[MetaOapg.properties.translated_content_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translated_title"]) -> typing.Union[MetaOapg.properties.translated_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annotations", "data_tags", "embedded_urls", "extra_attributes", "image_urls", "segments", "author", "content_text", "geolocation", "id", "language", "media_type", "media_type_attributes", "mentioned_users", "name", "time_published", "title", "url", "translated_content_text", "translated_title", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        annotations: typing.Union[MetaOapg.properties.annotations, list, tuple, schemas.Unset] = schemas.unset,
        data_tags: typing.Union[MetaOapg.properties.data_tags, list, tuple, schemas.Unset] = schemas.unset,
        embedded_urls: typing.Union[MetaOapg.properties.embedded_urls, list, tuple, schemas.Unset] = schemas.unset,
        extra_attributes: typing.Union[MetaOapg.properties.extra_attributes, list, tuple, schemas.Unset] = schemas.unset,
        image_urls: typing.Union[MetaOapg.properties.image_urls, list, tuple, schemas.Unset] = schemas.unset,
        segments: typing.Union[MetaOapg.properties.segments, list, tuple, schemas.Unset] = schemas.unset,
        author: typing.Union[MetaOapg.properties.author, str, schemas.Unset] = schemas.unset,
        content_text: typing.Union[MetaOapg.properties.content_text, str, schemas.Unset] = schemas.unset,
        geolocation: typing.Union['GeoLocation', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        media_type: typing.Union['MediaType', schemas.Unset] = schemas.unset,
        media_type_attributes: typing.Union['IncasOneOfMediaTypeAttributes', schemas.Unset] = schemas.unset,
        mentioned_users: typing.Union[MetaOapg.properties.mentioned_users, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        time_published: typing.Union[MetaOapg.properties.time_published, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        translated_content_text: typing.Union[MetaOapg.properties.translated_content_text, str, schemas.Unset] = schemas.unset,
        translated_title: typing.Union[MetaOapg.properties.translated_title, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IncasMessage':
        return super().__new__(
            cls,
            *_args,
            annotations=annotations,
            data_tags=data_tags,
            embedded_urls=embedded_urls,
            extra_attributes=extra_attributes,
            image_urls=image_urls,
            segments=segments,
            author=author,
            content_text=content_text,
            geolocation=geolocation,
            id=id,
            language=language,
            media_type=media_type,
            media_type_attributes=media_type_attributes,
            mentioned_users=mentioned_users,
            name=name,
            time_published=time_published,
            title=title,
            url=url,
            translated_content_text=translated_content_text,
            translated_title=translated_title,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.geo_location import GeoLocation
from apollo2_api_client.model.incas_annotation import IncasAnnotation
from apollo2_api_client.model.incas_extra_attribute import IncasExtraAttribute
from apollo2_api_client.model.incas_one_of_media_type_attributes import IncasOneOfMediaTypeAttributes
from apollo2_api_client.model.incas_segment import IncasSegment
from apollo2_api_client.model.media_type import MediaType
