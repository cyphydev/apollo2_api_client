# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class TwitterUserData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            location = schemas.StrSchema
            pinned_tweet_id = schemas.StrSchema
            profile_image_url = schemas.StrSchema
            protected = schemas.BoolSchema
        
            @staticmethod
            def public_metrics() -> typing.Type['TwitterPublicMetrics']:
                return TwitterPublicMetrics
            username = schemas.StrSchema
            verified = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "location": location,
                "pinned_tweet_id": pinned_tweet_id,
                "profile_image_url": profile_image_url,
                "protected": protected,
                "public_metrics": public_metrics,
                "username": username,
                "verified": verified,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_tweet_id"]) -> MetaOapg.properties.pinned_tweet_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_image_url"]) -> MetaOapg.properties.profile_image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protected"]) -> MetaOapg.properties.protected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_metrics"]) -> 'TwitterPublicMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verified"]) -> MetaOapg.properties.verified: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "location", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "username", "verified", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_tweet_id"]) -> typing.Union[MetaOapg.properties.pinned_tweet_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_image_url"]) -> typing.Union[MetaOapg.properties.profile_image_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protected"]) -> typing.Union[MetaOapg.properties.protected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_metrics"]) -> typing.Union['TwitterPublicMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verified"]) -> typing.Union[MetaOapg.properties.verified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "location", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "username", "verified", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        pinned_tweet_id: typing.Union[MetaOapg.properties.pinned_tweet_id, str, schemas.Unset] = schemas.unset,
        profile_image_url: typing.Union[MetaOapg.properties.profile_image_url, str, schemas.Unset] = schemas.unset,
        protected: typing.Union[MetaOapg.properties.protected, bool, schemas.Unset] = schemas.unset,
        public_metrics: typing.Union['TwitterPublicMetrics', schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        verified: typing.Union[MetaOapg.properties.verified, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TwitterUserData':
        return super().__new__(
            cls,
            *_args,
            description=description,
            location=location,
            pinned_tweet_id=pinned_tweet_id,
            profile_image_url=profile_image_url,
            protected=protected,
            public_metrics=public_metrics,
            username=username,
            verified=verified,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.twitter_public_metrics import TwitterPublicMetrics
