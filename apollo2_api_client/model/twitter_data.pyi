# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class TwitterData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def attachments() -> typing.Type['TwitterAttachment']:
                return TwitterAttachment
            
            
            class context_annotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TwitterContextAnnotation']:
                        return TwitterContextAnnotation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TwitterContextAnnotation'], typing.List['TwitterContextAnnotation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'context_annotations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TwitterContextAnnotation':
                    return super().__getitem__(i)
            author_id = schemas.StrSchema
            conversation_id = schemas.StrSchema
            created_at = schemas.StrSchema
        
            @staticmethod
            def edit_controls() -> typing.Type['TwitterEditControls']:
                return TwitterEditControls
            
            
            class edit_history_tweet_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'edit_history_tweet_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def entities() -> typing.Type['TwitterEntities']:
                return TwitterEntities
            id = schemas.StrSchema
            lang = schemas.StrSchema
            possibly_sensitive = schemas.BoolSchema
        
            @staticmethod
            def public_metrics() -> typing.Type['TwitterPublicMetrics']:
                return TwitterPublicMetrics
            
            
            class reference_tweets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TwitterReferencedTweet']:
                        return TwitterReferencedTweet
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TwitterReferencedTweet'], typing.List['TwitterReferencedTweet']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reference_tweets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TwitterReferencedTweet':
                    return super().__getitem__(i)
            reply_settings = schemas.StrSchema
            tweet_id = schemas.StrSchema
            twitter_author_screenname = schemas.StrSchema
            twitter_user_id = schemas.StrSchema
            __annotations__ = {
                "attachments": attachments,
                "context_annotations": context_annotations,
                "author_id": author_id,
                "conversation_id": conversation_id,
                "created_at": created_at,
                "edit_controls": edit_controls,
                "edit_history_tweet_ids": edit_history_tweet_ids,
                "entities": entities,
                "id": id,
                "lang": lang,
                "possibly_sensitive": possibly_sensitive,
                "public_metrics": public_metrics,
                "reference_tweets": reference_tweets,
                "reply_settings": reply_settings,
                "tweet_id": tweet_id,
                "twitter_author_screenname": twitter_author_screenname,
                "twitter_user_id": twitter_user_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> 'TwitterAttachment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context_annotations"]) -> MetaOapg.properties.context_annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author_id"]) -> MetaOapg.properties.author_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conversation_id"]) -> MetaOapg.properties.conversation_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_controls"]) -> 'TwitterEditControls': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_history_tweet_ids"]) -> MetaOapg.properties.edit_history_tweet_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entities"]) -> 'TwitterEntities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["possibly_sensitive"]) -> MetaOapg.properties.possibly_sensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_metrics"]) -> 'TwitterPublicMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_tweets"]) -> MetaOapg.properties.reference_tweets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_settings"]) -> MetaOapg.properties.reply_settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tweet_id"]) -> MetaOapg.properties.tweet_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter_author_screenname"]) -> MetaOapg.properties.twitter_author_screenname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twitter_user_id"]) -> MetaOapg.properties.twitter_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attachments", "context_annotations", "author_id", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "id", "lang", "possibly_sensitive", "public_metrics", "reference_tweets", "reply_settings", "tweet_id", "twitter_author_screenname", "twitter_user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union['TwitterAttachment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context_annotations"]) -> typing.Union[MetaOapg.properties.context_annotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author_id"]) -> typing.Union[MetaOapg.properties.author_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conversation_id"]) -> typing.Union[MetaOapg.properties.conversation_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_controls"]) -> typing.Union['TwitterEditControls', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_history_tweet_ids"]) -> typing.Union[MetaOapg.properties.edit_history_tweet_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entities"]) -> typing.Union['TwitterEntities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> typing.Union[MetaOapg.properties.lang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["possibly_sensitive"]) -> typing.Union[MetaOapg.properties.possibly_sensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_metrics"]) -> typing.Union['TwitterPublicMetrics', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_tweets"]) -> typing.Union[MetaOapg.properties.reference_tweets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_settings"]) -> typing.Union[MetaOapg.properties.reply_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tweet_id"]) -> typing.Union[MetaOapg.properties.tweet_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter_author_screenname"]) -> typing.Union[MetaOapg.properties.twitter_author_screenname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twitter_user_id"]) -> typing.Union[MetaOapg.properties.twitter_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attachments", "context_annotations", "author_id", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "id", "lang", "possibly_sensitive", "public_metrics", "reference_tweets", "reply_settings", "tweet_id", "twitter_author_screenname", "twitter_user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attachments: typing.Union['TwitterAttachment', schemas.Unset] = schemas.unset,
        context_annotations: typing.Union[MetaOapg.properties.context_annotations, list, tuple, schemas.Unset] = schemas.unset,
        author_id: typing.Union[MetaOapg.properties.author_id, str, schemas.Unset] = schemas.unset,
        conversation_id: typing.Union[MetaOapg.properties.conversation_id, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        edit_controls: typing.Union['TwitterEditControls', schemas.Unset] = schemas.unset,
        edit_history_tweet_ids: typing.Union[MetaOapg.properties.edit_history_tweet_ids, list, tuple, schemas.Unset] = schemas.unset,
        entities: typing.Union['TwitterEntities', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        lang: typing.Union[MetaOapg.properties.lang, str, schemas.Unset] = schemas.unset,
        possibly_sensitive: typing.Union[MetaOapg.properties.possibly_sensitive, bool, schemas.Unset] = schemas.unset,
        public_metrics: typing.Union['TwitterPublicMetrics', schemas.Unset] = schemas.unset,
        reference_tweets: typing.Union[MetaOapg.properties.reference_tweets, list, tuple, schemas.Unset] = schemas.unset,
        reply_settings: typing.Union[MetaOapg.properties.reply_settings, str, schemas.Unset] = schemas.unset,
        tweet_id: typing.Union[MetaOapg.properties.tweet_id, str, schemas.Unset] = schemas.unset,
        twitter_author_screenname: typing.Union[MetaOapg.properties.twitter_author_screenname, str, schemas.Unset] = schemas.unset,
        twitter_user_id: typing.Union[MetaOapg.properties.twitter_user_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TwitterData':
        return super().__new__(
            cls,
            *_args,
            attachments=attachments,
            context_annotations=context_annotations,
            author_id=author_id,
            conversation_id=conversation_id,
            created_at=created_at,
            edit_controls=edit_controls,
            edit_history_tweet_ids=edit_history_tweet_ids,
            entities=entities,
            id=id,
            lang=lang,
            possibly_sensitive=possibly_sensitive,
            public_metrics=public_metrics,
            reference_tweets=reference_tweets,
            reply_settings=reply_settings,
            tweet_id=tweet_id,
            twitter_author_screenname=twitter_author_screenname,
            twitter_user_id=twitter_user_id,
            _configuration=_configuration,
            **kwargs,
        )

from apollo2_api_client.model.twitter_attachment import TwitterAttachment
from apollo2_api_client.model.twitter_context_annotation import TwitterContextAnnotation
from apollo2_api_client.model.twitter_edit_controls import TwitterEditControls
from apollo2_api_client.model.twitter_entities import TwitterEntities
from apollo2_api_client.model.twitter_public_metrics import TwitterPublicMetrics
from apollo2_api_client.model.twitter_referenced_tweet import TwitterReferencedTweet
