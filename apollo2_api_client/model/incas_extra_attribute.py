# coding: utf-8

"""
    Apollo2 API Server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apollo2_api_client import schemas  # noqa: F401


class IncasExtraAttribute(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            id = schemas.StrSchema
            provider_name = schemas.StrSchema
            attribute_key = schemas.StrSchema
            attribute_value = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "id": id,
                "provider_name": provider_name,
                "attribute_key": attribute_key,
                "attribute_value": attribute_value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_name"]) -> MetaOapg.properties.provider_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_key"]) -> MetaOapg.properties.attribute_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_value"]) -> MetaOapg.properties.attribute_value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "id", "provider_name", "attribute_key", "attribute_value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_name"]) -> typing.Union[MetaOapg.properties.provider_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_key"]) -> typing.Union[MetaOapg.properties.attribute_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_value"]) -> typing.Union[MetaOapg.properties.attribute_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "id", "provider_name", "attribute_key", "attribute_value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        provider_name: typing.Union[MetaOapg.properties.provider_name, str, schemas.Unset] = schemas.unset,
        attribute_key: typing.Union[MetaOapg.properties.attribute_key, str, schemas.Unset] = schemas.unset,
        attribute_value: typing.Union[MetaOapg.properties.attribute_value, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IncasExtraAttribute':
        return super().__new__(
            cls,
            *_args,
            name=name,
            id=id,
            provider_name=provider_name,
            attribute_key=attribute_key,
            attribute_value=attribute_value,
            _configuration=_configuration,
            **kwargs,
        )
