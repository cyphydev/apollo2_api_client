# coding: utf-8

"""
    Mips UIUC Datatypes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Entities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'list[Annotation]',
        'hashtags': 'list[Hashtag]',
        'mentions': 'list[Mention]'
    }

    attribute_map = {
        'annotations': 'annotations',
        'hashtags': 'hashtags',
        'mentions': 'mentions'
    }

    def __init__(self, annotations=None, hashtags=None, mentions=None):  # noqa: E501
        """Entities - a model defined in Swagger"""  # noqa: E501
        self._annotations = None
        self._hashtags = None
        self._mentions = None
        self.discriminator = None
        if annotations is not None:
            self.annotations = annotations
        if hashtags is not None:
            self.hashtags = hashtags
        if mentions is not None:
            self.mentions = mentions

    @property
    def annotations(self):
        """Gets the annotations of this Entities.  # noqa: E501


        :return: The annotations of this Entities.  # noqa: E501
        :rtype: list[Annotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Entities.


        :param annotations: The annotations of this Entities.  # noqa: E501
        :type: list[Annotation]
        """

        self._annotations = annotations

    @property
    def hashtags(self):
        """Gets the hashtags of this Entities.  # noqa: E501


        :return: The hashtags of this Entities.  # noqa: E501
        :rtype: list[Hashtag]
        """
        return self._hashtags

    @hashtags.setter
    def hashtags(self, hashtags):
        """Sets the hashtags of this Entities.


        :param hashtags: The hashtags of this Entities.  # noqa: E501
        :type: list[Hashtag]
        """

        self._hashtags = hashtags

    @property
    def mentions(self):
        """Gets the mentions of this Entities.  # noqa: E501


        :return: The mentions of this Entities.  # noqa: E501
        :rtype: list[Mention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Entities.


        :param mentions: The mentions of this Entities.  # noqa: E501
        :type: list[Mention]
        """

        self._mentions = mentions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
