# coding: utf-8

"""
    Mips UIUC Datatypes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Edge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'graph_id': 'int',
        'src_id': 'int',
        'dst_id': 'int',
        'type': 'str',
        'timestamp': 'int',
        'data': 'object'
    }

    attribute_map = {
        'id': 'id',
        'graph_id': 'graph_id',
        'src_id': 'src_id',
        'dst_id': 'dst_id',
        'type': 'type',
        'timestamp': 'timestamp',
        'data': 'data'
    }

    def __init__(self, id=None, graph_id=None, src_id=None, dst_id=None, type=None, timestamp=None, data=None):  # noqa: E501
        """Edge - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._graph_id = None
        self._src_id = None
        self._dst_id = None
        self._type = None
        self._timestamp = None
        self._data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.graph_id = graph_id
        self.src_id = src_id
        self.dst_id = dst_id
        self.type = type
        if timestamp is not None:
            self.timestamp = timestamp
        if data is not None:
            self.data = data

    @property
    def id(self):
        """Gets the id of this Edge.  # noqa: E501


        :return: The id of this Edge.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Edge.


        :param id: The id of this Edge.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def graph_id(self):
        """Gets the graph_id of this Edge.  # noqa: E501


        :return: The graph_id of this Edge.  # noqa: E501
        :rtype: int
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id):
        """Sets the graph_id of this Edge.


        :param graph_id: The graph_id of this Edge.  # noqa: E501
        :type: int
        """
        if graph_id is None:
            raise ValueError("Invalid value for `graph_id`, must not be `None`")  # noqa: E501

        self._graph_id = graph_id

    @property
    def src_id(self):
        """Gets the src_id of this Edge.  # noqa: E501


        :return: The src_id of this Edge.  # noqa: E501
        :rtype: int
        """
        return self._src_id

    @src_id.setter
    def src_id(self, src_id):
        """Sets the src_id of this Edge.


        :param src_id: The src_id of this Edge.  # noqa: E501
        :type: int
        """
        if src_id is None:
            raise ValueError("Invalid value for `src_id`, must not be `None`")  # noqa: E501

        self._src_id = src_id

    @property
    def dst_id(self):
        """Gets the dst_id of this Edge.  # noqa: E501


        :return: The dst_id of this Edge.  # noqa: E501
        :rtype: int
        """
        return self._dst_id

    @dst_id.setter
    def dst_id(self, dst_id):
        """Sets the dst_id of this Edge.


        :param dst_id: The dst_id of this Edge.  # noqa: E501
        :type: int
        """
        if dst_id is None:
            raise ValueError("Invalid value for `dst_id`, must not be `None`")  # noqa: E501

        self._dst_id = dst_id

    @property
    def type(self):
        """Gets the type of this Edge.  # noqa: E501


        :return: The type of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Edge.


        :param type: The type of this Edge.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def timestamp(self):
        """Gets the timestamp of this Edge.  # noqa: E501


        :return: The timestamp of this Edge.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Edge.


        :param timestamp: The timestamp of this Edge.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def data(self):
        """Gets the data of this Edge.  # noqa: E501


        :return: The data of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Edge.


        :param data: The data of this Edge.  # noqa: E501
        :type: object
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Edge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
