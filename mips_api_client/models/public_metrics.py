# coding: utf-8

"""
    Mips UIUC Datatypes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'like_count': 'int',
        'quote_count': 'int',
        'reply_count': 'int',
        'retweet_count': 'int',
        'followers_count': 'int',
        'following_count': 'int',
        'listed_count': 'int',
        'tweet_count': 'int'
    }

    attribute_map = {
        'like_count': 'like_count',
        'quote_count': 'quote_count',
        'reply_count': 'reply_count',
        'retweet_count': 'retweet_count',
        'followers_count': 'followers_count',
        'following_count': 'following_count',
        'listed_count': 'listed_count',
        'tweet_count': 'tweet_count'
    }

    def __init__(self, like_count=None, quote_count=None, reply_count=None, retweet_count=None, followers_count=None, following_count=None, listed_count=None, tweet_count=None):  # noqa: E501
        """PublicMetrics - a model defined in Swagger"""  # noqa: E501
        self._like_count = None
        self._quote_count = None
        self._reply_count = None
        self._retweet_count = None
        self._followers_count = None
        self._following_count = None
        self._listed_count = None
        self._tweet_count = None
        self.discriminator = None
        if like_count is not None:
            self.like_count = like_count
        if quote_count is not None:
            self.quote_count = quote_count
        if reply_count is not None:
            self.reply_count = reply_count
        if retweet_count is not None:
            self.retweet_count = retweet_count
        if followers_count is not None:
            self.followers_count = followers_count
        if following_count is not None:
            self.following_count = following_count
        if listed_count is not None:
            self.listed_count = listed_count
        if tweet_count is not None:
            self.tweet_count = tweet_count

    @property
    def like_count(self):
        """Gets the like_count of this PublicMetrics.  # noqa: E501


        :return: The like_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """Sets the like_count of this PublicMetrics.


        :param like_count: The like_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._like_count = like_count

    @property
    def quote_count(self):
        """Gets the quote_count of this PublicMetrics.  # noqa: E501


        :return: The quote_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._quote_count

    @quote_count.setter
    def quote_count(self, quote_count):
        """Sets the quote_count of this PublicMetrics.


        :param quote_count: The quote_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._quote_count = quote_count

    @property
    def reply_count(self):
        """Gets the reply_count of this PublicMetrics.  # noqa: E501


        :return: The reply_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._reply_count

    @reply_count.setter
    def reply_count(self, reply_count):
        """Sets the reply_count of this PublicMetrics.


        :param reply_count: The reply_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._reply_count = reply_count

    @property
    def retweet_count(self):
        """Gets the retweet_count of this PublicMetrics.  # noqa: E501


        :return: The retweet_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._retweet_count

    @retweet_count.setter
    def retweet_count(self, retweet_count):
        """Sets the retweet_count of this PublicMetrics.


        :param retweet_count: The retweet_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._retweet_count = retweet_count

    @property
    def followers_count(self):
        """Gets the followers_count of this PublicMetrics.  # noqa: E501


        :return: The followers_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this PublicMetrics.


        :param followers_count: The followers_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._followers_count = followers_count

    @property
    def following_count(self):
        """Gets the following_count of this PublicMetrics.  # noqa: E501


        :return: The following_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """Sets the following_count of this PublicMetrics.


        :param following_count: The following_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._following_count = following_count

    @property
    def listed_count(self):
        """Gets the listed_count of this PublicMetrics.  # noqa: E501


        :return: The listed_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._listed_count

    @listed_count.setter
    def listed_count(self, listed_count):
        """Sets the listed_count of this PublicMetrics.


        :param listed_count: The listed_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._listed_count = listed_count

    @property
    def tweet_count(self):
        """Gets the tweet_count of this PublicMetrics.  # noqa: E501


        :return: The tweet_count of this PublicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._tweet_count

    @tweet_count.setter
    def tweet_count(self, tweet_count):
        """Sets the tweet_count of this PublicMetrics.


        :param tweet_count: The tweet_count of this PublicMetrics.  # noqa: E501
        :type: int
        """

        self._tweet_count = tweet_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
