# coding: utf-8

"""
    Mips UIUC Datatypes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncasMediaResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_bio': 'str',
        'account_id': 'str',
        'account_status': 'str',
        'account_type': 'AccountType',
        'display_names': 'list[str]',
        'follower_count': 'int',
        'friends_count': 'int',
        'hashed_user_names': 'list[str]',
        'language': 'str',
        'url': 'str',
        'user_names': 'list[str]',
        'verified': 'bool'
    }

    attribute_map = {
        'account_bio': 'account_bio',
        'account_id': 'account_id',
        'account_status': 'account_status',
        'account_type': 'account_type',
        'display_names': 'display_names',
        'follower_count': 'follower_count',
        'friends_count': 'friends_count',
        'hashed_user_names': 'hashedUser_names',
        'language': 'language',
        'url': 'url',
        'user_names': 'user_names',
        'verified': 'verified'
    }

    def __init__(self, account_bio=None, account_id=None, account_status=None, account_type=None, display_names=None, follower_count=None, friends_count=None, hashed_user_names=None, language=None, url=None, user_names=None, verified=None):  # noqa: E501
        """IncasMediaResource - a model defined in Swagger"""  # noqa: E501
        self._account_bio = None
        self._account_id = None
        self._account_status = None
        self._account_type = None
        self._display_names = None
        self._follower_count = None
        self._friends_count = None
        self._hashed_user_names = None
        self._language = None
        self._url = None
        self._user_names = None
        self._verified = None
        self.discriminator = None
        if account_bio is not None:
            self.account_bio = account_bio
        if account_id is not None:
            self.account_id = account_id
        if account_status is not None:
            self.account_status = account_status
        if account_type is not None:
            self.account_type = account_type
        if display_names is not None:
            self.display_names = display_names
        if follower_count is not None:
            self.follower_count = follower_count
        if friends_count is not None:
            self.friends_count = friends_count
        if hashed_user_names is not None:
            self.hashed_user_names = hashed_user_names
        if language is not None:
            self.language = language
        if url is not None:
            self.url = url
        if user_names is not None:
            self.user_names = user_names
        if verified is not None:
            self.verified = verified

    @property
    def account_bio(self):
        """Gets the account_bio of this IncasMediaResource.  # noqa: E501


        :return: The account_bio of this IncasMediaResource.  # noqa: E501
        :rtype: str
        """
        return self._account_bio

    @account_bio.setter
    def account_bio(self, account_bio):
        """Sets the account_bio of this IncasMediaResource.


        :param account_bio: The account_bio of this IncasMediaResource.  # noqa: E501
        :type: str
        """

        self._account_bio = account_bio

    @property
    def account_id(self):
        """Gets the account_id of this IncasMediaResource.  # noqa: E501


        :return: The account_id of this IncasMediaResource.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this IncasMediaResource.


        :param account_id: The account_id of this IncasMediaResource.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_status(self):
        """Gets the account_status of this IncasMediaResource.  # noqa: E501


        :return: The account_status of this IncasMediaResource.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this IncasMediaResource.


        :param account_status: The account_status of this IncasMediaResource.  # noqa: E501
        :type: str
        """

        self._account_status = account_status

    @property
    def account_type(self):
        """Gets the account_type of this IncasMediaResource.  # noqa: E501


        :return: The account_type of this IncasMediaResource.  # noqa: E501
        :rtype: AccountType
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this IncasMediaResource.


        :param account_type: The account_type of this IncasMediaResource.  # noqa: E501
        :type: AccountType
        """

        self._account_type = account_type

    @property
    def display_names(self):
        """Gets the display_names of this IncasMediaResource.  # noqa: E501


        :return: The display_names of this IncasMediaResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names):
        """Sets the display_names of this IncasMediaResource.


        :param display_names: The display_names of this IncasMediaResource.  # noqa: E501
        :type: list[str]
        """

        self._display_names = display_names

    @property
    def follower_count(self):
        """Gets the follower_count of this IncasMediaResource.  # noqa: E501


        :return: The follower_count of this IncasMediaResource.  # noqa: E501
        :rtype: int
        """
        return self._follower_count

    @follower_count.setter
    def follower_count(self, follower_count):
        """Sets the follower_count of this IncasMediaResource.


        :param follower_count: The follower_count of this IncasMediaResource.  # noqa: E501
        :type: int
        """

        self._follower_count = follower_count

    @property
    def friends_count(self):
        """Gets the friends_count of this IncasMediaResource.  # noqa: E501


        :return: The friends_count of this IncasMediaResource.  # noqa: E501
        :rtype: int
        """
        return self._friends_count

    @friends_count.setter
    def friends_count(self, friends_count):
        """Sets the friends_count of this IncasMediaResource.


        :param friends_count: The friends_count of this IncasMediaResource.  # noqa: E501
        :type: int
        """

        self._friends_count = friends_count

    @property
    def hashed_user_names(self):
        """Gets the hashed_user_names of this IncasMediaResource.  # noqa: E501


        :return: The hashed_user_names of this IncasMediaResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._hashed_user_names

    @hashed_user_names.setter
    def hashed_user_names(self, hashed_user_names):
        """Sets the hashed_user_names of this IncasMediaResource.


        :param hashed_user_names: The hashed_user_names of this IncasMediaResource.  # noqa: E501
        :type: list[str]
        """

        self._hashed_user_names = hashed_user_names

    @property
    def language(self):
        """Gets the language of this IncasMediaResource.  # noqa: E501


        :return: The language of this IncasMediaResource.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this IncasMediaResource.


        :param language: The language of this IncasMediaResource.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def url(self):
        """Gets the url of this IncasMediaResource.  # noqa: E501


        :return: The url of this IncasMediaResource.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IncasMediaResource.


        :param url: The url of this IncasMediaResource.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_names(self):
        """Gets the user_names of this IncasMediaResource.  # noqa: E501


        :return: The user_names of this IncasMediaResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_names

    @user_names.setter
    def user_names(self, user_names):
        """Sets the user_names of this IncasMediaResource.


        :param user_names: The user_names of this IncasMediaResource.  # noqa: E501
        :type: list[str]
        """

        self._user_names = user_names

    @property
    def verified(self):
        """Gets the verified of this IncasMediaResource.  # noqa: E501


        :return: The verified of this IncasMediaResource.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this IncasMediaResource.


        :param verified: The verified of this IncasMediaResource.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncasMediaResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncasMediaResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
