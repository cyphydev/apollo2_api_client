# coding: utf-8

"""
    Mips UIUC Datatypes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TwitterUserData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'location': 'str',
        'pinned_tweet_id': 'str',
        'profile_image_url': 'str',
        'protected': 'bool',
        'public_metrics': 'PublicMetrics',
        'username': 'str',
        'verified': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'location': 'location',
        'pinned_tweet_id': 'pinned_tweet_id',
        'profile_image_url': 'profile_image_url',
        'protected': 'protected',
        'public_metrics': 'public_metrics',
        'username': 'username',
        'verified': 'verified'
    }

    def __init__(self, description=None, location=None, pinned_tweet_id=None, profile_image_url=None, protected=None, public_metrics=None, username=None, verified=None):  # noqa: E501
        """TwitterUserData - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._location = None
        self._pinned_tweet_id = None
        self._profile_image_url = None
        self._protected = None
        self._public_metrics = None
        self._username = None
        self._verified = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if pinned_tweet_id is not None:
            self.pinned_tweet_id = pinned_tweet_id
        if profile_image_url is not None:
            self.profile_image_url = profile_image_url
        if protected is not None:
            self.protected = protected
        if public_metrics is not None:
            self.public_metrics = public_metrics
        if username is not None:
            self.username = username
        if verified is not None:
            self.verified = verified

    @property
    def description(self):
        """Gets the description of this TwitterUserData.  # noqa: E501


        :return: The description of this TwitterUserData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TwitterUserData.


        :param description: The description of this TwitterUserData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this TwitterUserData.  # noqa: E501


        :return: The location of this TwitterUserData.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TwitterUserData.


        :param location: The location of this TwitterUserData.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def pinned_tweet_id(self):
        """Gets the pinned_tweet_id of this TwitterUserData.  # noqa: E501


        :return: The pinned_tweet_id of this TwitterUserData.  # noqa: E501
        :rtype: str
        """
        return self._pinned_tweet_id

    @pinned_tweet_id.setter
    def pinned_tweet_id(self, pinned_tweet_id):
        """Sets the pinned_tweet_id of this TwitterUserData.


        :param pinned_tweet_id: The pinned_tweet_id of this TwitterUserData.  # noqa: E501
        :type: str
        """

        self._pinned_tweet_id = pinned_tweet_id

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this TwitterUserData.  # noqa: E501


        :return: The profile_image_url of this TwitterUserData.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this TwitterUserData.


        :param profile_image_url: The profile_image_url of this TwitterUserData.  # noqa: E501
        :type: str
        """

        self._profile_image_url = profile_image_url

    @property
    def protected(self):
        """Gets the protected of this TwitterUserData.  # noqa: E501


        :return: The protected of this TwitterUserData.  # noqa: E501
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this TwitterUserData.


        :param protected: The protected of this TwitterUserData.  # noqa: E501
        :type: bool
        """

        self._protected = protected

    @property
    def public_metrics(self):
        """Gets the public_metrics of this TwitterUserData.  # noqa: E501


        :return: The public_metrics of this TwitterUserData.  # noqa: E501
        :rtype: PublicMetrics
        """
        return self._public_metrics

    @public_metrics.setter
    def public_metrics(self, public_metrics):
        """Sets the public_metrics of this TwitterUserData.


        :param public_metrics: The public_metrics of this TwitterUserData.  # noqa: E501
        :type: PublicMetrics
        """

        self._public_metrics = public_metrics

    @property
    def username(self):
        """Gets the username of this TwitterUserData.  # noqa: E501


        :return: The username of this TwitterUserData.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TwitterUserData.


        :param username: The username of this TwitterUserData.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def verified(self):
        """Gets the verified of this TwitterUserData.  # noqa: E501


        :return: The verified of this TwitterUserData.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this TwitterUserData.


        :param verified: The verified of this TwitterUserData.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TwitterUserData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TwitterUserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
