# coding: utf-8

"""
    Mips UIUC Datatypes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Source(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'platform': 'MediaType',
        'sid': 'int',
        'enrichments': 'list[Enrichment]',
        'clusters': 'list[ClusterMember]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'platform': 'platform',
        'sid': 'sid',
        'enrichments': 'enrichments',
        'clusters': 'clusters'
    }

    def __init__(self, id=None, type=None, platform=None, sid=None, enrichments=None, clusters=None):  # noqa: E501
        """Source - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._platform = None
        self._sid = None
        self._enrichments = None
        self._clusters = None
        self.discriminator = None
        self.id = id
        self.type = type
        self.platform = platform
        if sid is not None:
            self.sid = sid
        if enrichments is not None:
            self.enrichments = enrichments
        if clusters is not None:
            self.clusters = clusters

    @property
    def id(self):
        """Gets the id of this Source.  # noqa: E501


        :return: The id of this Source.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Source.


        :param id: The id of this Source.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this Source.  # noqa: E501


        :return: The type of this Source.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Source.


        :param type: The type of this Source.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def platform(self):
        """Gets the platform of this Source.  # noqa: E501


        :return: The platform of this Source.  # noqa: E501
        :rtype: MediaType
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Source.


        :param platform: The platform of this Source.  # noqa: E501
        :type: MediaType
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def sid(self):
        """Gets the sid of this Source.  # noqa: E501


        :return: The sid of this Source.  # noqa: E501
        :rtype: int
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this Source.


        :param sid: The sid of this Source.  # noqa: E501
        :type: int
        """

        self._sid = sid

    @property
    def enrichments(self):
        """Gets the enrichments of this Source.  # noqa: E501


        :return: The enrichments of this Source.  # noqa: E501
        :rtype: list[Enrichment]
        """
        return self._enrichments

    @enrichments.setter
    def enrichments(self, enrichments):
        """Sets the enrichments of this Source.


        :param enrichments: The enrichments of this Source.  # noqa: E501
        :type: list[Enrichment]
        """

        self._enrichments = enrichments

    @property
    def clusters(self):
        """Gets the clusters of this Source.  # noqa: E501


        :return: The clusters of this Source.  # noqa: E501
        :rtype: list[ClusterMember]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this Source.


        :param clusters: The clusters of this Source.  # noqa: E501
        :type: list[ClusterMember]
        """

        self._clusters = clusters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Source, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Source):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
