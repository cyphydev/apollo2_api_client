# coding: utf-8

"""
    Mips UIUC Datatypes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncasTwitterData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'engagement_parent_id': 'str',
        'engagement_type': 'EngagementType',
        'follower_count': 'int',
        'following_count': 'int',
        'like_count': 'int',
        'mentioned_users': 'list[str]',
        'retweet_count': 'int',
        'tweet_id': 'str',
        'twitter_author_screenname': 'str',
        'twitter_user_id': 'str'
    }

    attribute_map = {
        'engagement_parent_id': 'engagement_parent_id',
        'engagement_type': 'engagement_type',
        'follower_count': 'follower_count',
        'following_count': 'following_count',
        'like_count': 'like_count',
        'mentioned_users': 'mentioned_users',
        'retweet_count': 'retweet_count',
        'tweet_id': 'tweet_id',
        'twitter_author_screenname': 'twitter_author_screenname',
        'twitter_user_id': 'twitter_user_id'
    }

    def __init__(self, engagement_parent_id=None, engagement_type=None, follower_count=None, following_count=None, like_count=None, mentioned_users=None, retweet_count=None, tweet_id=None, twitter_author_screenname=None, twitter_user_id=None):  # noqa: E501
        """IncasTwitterData - a model defined in Swagger"""  # noqa: E501
        self._engagement_parent_id = None
        self._engagement_type = None
        self._follower_count = None
        self._following_count = None
        self._like_count = None
        self._mentioned_users = None
        self._retweet_count = None
        self._tweet_id = None
        self._twitter_author_screenname = None
        self._twitter_user_id = None
        self.discriminator = None
        if engagement_parent_id is not None:
            self.engagement_parent_id = engagement_parent_id
        if engagement_type is not None:
            self.engagement_type = engagement_type
        if follower_count is not None:
            self.follower_count = follower_count
        if following_count is not None:
            self.following_count = following_count
        if like_count is not None:
            self.like_count = like_count
        if mentioned_users is not None:
            self.mentioned_users = mentioned_users
        if retweet_count is not None:
            self.retweet_count = retweet_count
        if tweet_id is not None:
            self.tweet_id = tweet_id
        if twitter_author_screenname is not None:
            self.twitter_author_screenname = twitter_author_screenname
        if twitter_user_id is not None:
            self.twitter_user_id = twitter_user_id

    @property
    def engagement_parent_id(self):
        """Gets the engagement_parent_id of this IncasTwitterData.  # noqa: E501


        :return: The engagement_parent_id of this IncasTwitterData.  # noqa: E501
        :rtype: str
        """
        return self._engagement_parent_id

    @engagement_parent_id.setter
    def engagement_parent_id(self, engagement_parent_id):
        """Sets the engagement_parent_id of this IncasTwitterData.


        :param engagement_parent_id: The engagement_parent_id of this IncasTwitterData.  # noqa: E501
        :type: str
        """

        self._engagement_parent_id = engagement_parent_id

    @property
    def engagement_type(self):
        """Gets the engagement_type of this IncasTwitterData.  # noqa: E501


        :return: The engagement_type of this IncasTwitterData.  # noqa: E501
        :rtype: EngagementType
        """
        return self._engagement_type

    @engagement_type.setter
    def engagement_type(self, engagement_type):
        """Sets the engagement_type of this IncasTwitterData.


        :param engagement_type: The engagement_type of this IncasTwitterData.  # noqa: E501
        :type: EngagementType
        """

        self._engagement_type = engagement_type

    @property
    def follower_count(self):
        """Gets the follower_count of this IncasTwitterData.  # noqa: E501


        :return: The follower_count of this IncasTwitterData.  # noqa: E501
        :rtype: int
        """
        return self._follower_count

    @follower_count.setter
    def follower_count(self, follower_count):
        """Sets the follower_count of this IncasTwitterData.


        :param follower_count: The follower_count of this IncasTwitterData.  # noqa: E501
        :type: int
        """

        self._follower_count = follower_count

    @property
    def following_count(self):
        """Gets the following_count of this IncasTwitterData.  # noqa: E501


        :return: The following_count of this IncasTwitterData.  # noqa: E501
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """Sets the following_count of this IncasTwitterData.


        :param following_count: The following_count of this IncasTwitterData.  # noqa: E501
        :type: int
        """

        self._following_count = following_count

    @property
    def like_count(self):
        """Gets the like_count of this IncasTwitterData.  # noqa: E501


        :return: The like_count of this IncasTwitterData.  # noqa: E501
        :rtype: int
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """Sets the like_count of this IncasTwitterData.


        :param like_count: The like_count of this IncasTwitterData.  # noqa: E501
        :type: int
        """

        self._like_count = like_count

    @property
    def mentioned_users(self):
        """Gets the mentioned_users of this IncasTwitterData.  # noqa: E501


        :return: The mentioned_users of this IncasTwitterData.  # noqa: E501
        :rtype: list[str]
        """
        return self._mentioned_users

    @mentioned_users.setter
    def mentioned_users(self, mentioned_users):
        """Sets the mentioned_users of this IncasTwitterData.


        :param mentioned_users: The mentioned_users of this IncasTwitterData.  # noqa: E501
        :type: list[str]
        """

        self._mentioned_users = mentioned_users

    @property
    def retweet_count(self):
        """Gets the retweet_count of this IncasTwitterData.  # noqa: E501


        :return: The retweet_count of this IncasTwitterData.  # noqa: E501
        :rtype: int
        """
        return self._retweet_count

    @retweet_count.setter
    def retweet_count(self, retweet_count):
        """Sets the retweet_count of this IncasTwitterData.


        :param retweet_count: The retweet_count of this IncasTwitterData.  # noqa: E501
        :type: int
        """

        self._retweet_count = retweet_count

    @property
    def tweet_id(self):
        """Gets the tweet_id of this IncasTwitterData.  # noqa: E501


        :return: The tweet_id of this IncasTwitterData.  # noqa: E501
        :rtype: str
        """
        return self._tweet_id

    @tweet_id.setter
    def tweet_id(self, tweet_id):
        """Sets the tweet_id of this IncasTwitterData.


        :param tweet_id: The tweet_id of this IncasTwitterData.  # noqa: E501
        :type: str
        """

        self._tweet_id = tweet_id

    @property
    def twitter_author_screenname(self):
        """Gets the twitter_author_screenname of this IncasTwitterData.  # noqa: E501


        :return: The twitter_author_screenname of this IncasTwitterData.  # noqa: E501
        :rtype: str
        """
        return self._twitter_author_screenname

    @twitter_author_screenname.setter
    def twitter_author_screenname(self, twitter_author_screenname):
        """Sets the twitter_author_screenname of this IncasTwitterData.


        :param twitter_author_screenname: The twitter_author_screenname of this IncasTwitterData.  # noqa: E501
        :type: str
        """

        self._twitter_author_screenname = twitter_author_screenname

    @property
    def twitter_user_id(self):
        """Gets the twitter_user_id of this IncasTwitterData.  # noqa: E501


        :return: The twitter_user_id of this IncasTwitterData.  # noqa: E501
        :rtype: str
        """
        return self._twitter_user_id

    @twitter_user_id.setter
    def twitter_user_id(self, twitter_user_id):
        """Sets the twitter_user_id of this IncasTwitterData.


        :param twitter_user_id: The twitter_user_id of this IncasTwitterData.  # noqa: E501
        :type: str
        """

        self._twitter_user_id = twitter_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncasTwitterData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncasTwitterData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
